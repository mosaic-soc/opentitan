From 2d20d2fe143c0a98413ca7889f6e16fa7949b96c Mon Sep 17 00:00:00 2001
From: Paul Scheffler <paulsc@iis.ee.ethz.ch>
Date: Wed, 17 Aug 2022 19:53:42 +0200
Subject: [PATCH] vendor: Patch generated PLIC RTL

---
 data/rv_plic.hjson     |  151 +-
 rtl/rv_plic.sv         |   53 +-
 rtl/rv_plic_reg_pkg.sv |  226 +--
 rtl/rv_plic_reg_top.sv | 3725 ++++++++++++++++++++++++------------------------
 4 files changed, 2092 insertions(+), 2063 deletions(-)

diff --git a/data/rv_plic.hjson b/data/rv_plic.hjson
index e35d6dd..c4d6d93 100644
--- a/data/rv_plic.hjson
+++ b/data/rv_plic.hjson
@@ -10,9 +10,9 @@
 #  - prio:   Max value of interrupt priorities
 {
   name: "RV_PLIC",
-  clocking: [{clock: "clk_i", reset: "rst_ni"}],
+  clock_primary: "clk_i",
   bus_interfaces: [
-    { protocol: "tlul", direction: "device" }
+    { protocol: "reg_iface", direction: "device" }
   ],
 
   param_list: [
@@ -47,34 +47,33 @@
     }
   ],
 
-  regwidth: "32",
-  registers: [
-    { multireg: {
-        name: "IP",
-        desc: "Interrupt Pending",
-        count: "NumSrc",
-        cname: "RV_PLIC",
-        swaccess: "ro",
-        hwaccess: "hwo",
-        fields: [
-          { bits: "0", name: "P", desc: "Interrupt Pending of Source" }
-        ],
-        tags: [// IP is driven by intr_src, cannot auto-predict
-               "excl:CsrNonInitTests:CsrExclCheck"],
-      }
+  inter_signal_list: [
+    { struct:  "logic",
+      type:    "uni",
+      name:    "irq",
+      act:     "req",
+      package: "",
+      width:   "1"
     },
-    { multireg: {
-        name: "LE",
-        desc: "Interrupt Source mode. 0: Level, 1: Edge-triggered",
-        count: "NumSrc",
-        cname: "RV_PLIC",
-        swaccess: "rw",
-        hwaccess: "hro",
-        fields: [
-          { bits: "0", name: "LE", desc: "L0E1" }
-        ],
-      }
+
+    { struct:  "logic",
+      type:    "uni",
+      name:    "irq_id",
+      act:     "req",
+      package: "",
     },
+
+    { struct:  "logic",
+      type:    "uni",
+      name:    "msip",
+      act:     "req",
+      package: "",
+      width:   "1"
+    },
+  ]
+
+  regwidth: "32",
+  registers: [
     { name: "PRIO0",
       desc: "Interrupt Source 0 Priority",
       swaccess: "rw",
@@ -82,7 +81,7 @@
       fields: [
         { bits: "2:0" }
       ],
-    }
+    },
     { name: "PRIO1",
       desc: "Interrupt Source 1 Priority",
       swaccess: "rw",
@@ -90,7 +89,7 @@
       fields: [
         { bits: "2:0" }
       ],
-    }
+    },
     { name: "PRIO2",
       desc: "Interrupt Source 2 Priority",
       swaccess: "rw",
@@ -98,7 +97,7 @@
       fields: [
         { bits: "2:0" }
       ],
-    }
+    },
     { name: "PRIO3",
       desc: "Interrupt Source 3 Priority",
       swaccess: "rw",
@@ -106,7 +105,7 @@
       fields: [
         { bits: "2:0" }
       ],
-    }
+    },
     { name: "PRIO4",
       desc: "Interrupt Source 4 Priority",
       swaccess: "rw",
@@ -114,7 +113,7 @@
       fields: [
         { bits: "2:0" }
       ],
-    }
+    },
     { name: "PRIO5",
       desc: "Interrupt Source 5 Priority",
       swaccess: "rw",
@@ -122,7 +121,7 @@
       fields: [
         { bits: "2:0" }
       ],
-    }
+    },
     { name: "PRIO6",
       desc: "Interrupt Source 6 Priority",
       swaccess: "rw",
@@ -130,7 +129,7 @@
       fields: [
         { bits: "2:0" }
       ],
-    }
+    },
     { name: "PRIO7",
       desc: "Interrupt Source 7 Priority",
       swaccess: "rw",
@@ -138,7 +137,7 @@
       fields: [
         { bits: "2:0" }
       ],
-    }
+    },
     { name: "PRIO8",
       desc: "Interrupt Source 8 Priority",
       swaccess: "rw",
@@ -146,7 +145,7 @@
       fields: [
         { bits: "2:0" }
       ],
-    }
+    },
     { name: "PRIO9",
       desc: "Interrupt Source 9 Priority",
       swaccess: "rw",
@@ -154,7 +153,7 @@
       fields: [
         { bits: "2:0" }
       ],
-    }
+    },
     { name: "PRIO10",
       desc: "Interrupt Source 10 Priority",
       swaccess: "rw",
@@ -162,7 +161,7 @@
       fields: [
         { bits: "2:0" }
       ],
-    }
+    },
     { name: "PRIO11",
       desc: "Interrupt Source 11 Priority",
       swaccess: "rw",
@@ -170,7 +169,7 @@
       fields: [
         { bits: "2:0" }
       ],
-    }
+    },
     { name: "PRIO12",
       desc: "Interrupt Source 12 Priority",
       swaccess: "rw",
@@ -178,7 +177,7 @@
       fields: [
         { bits: "2:0" }
       ],
-    }
+    },
     { name: "PRIO13",
       desc: "Interrupt Source 13 Priority",
       swaccess: "rw",
@@ -186,7 +185,7 @@
       fields: [
         { bits: "2:0" }
       ],
-    }
+    },
     { name: "PRIO14",
       desc: "Interrupt Source 14 Priority",
       swaccess: "rw",
@@ -194,7 +193,7 @@
       fields: [
         { bits: "2:0" }
       ],
-    }
+    },
     { name: "PRIO15",
       desc: "Interrupt Source 15 Priority",
       swaccess: "rw",
@@ -202,7 +201,7 @@
       fields: [
         { bits: "2:0" }
       ],
-    }
+    },
     { name: "PRIO16",
       desc: "Interrupt Source 16 Priority",
       swaccess: "rw",
@@ -210,7 +209,7 @@
       fields: [
         { bits: "2:0" }
       ],
-    }
+    },
     { name: "PRIO17",
       desc: "Interrupt Source 17 Priority",
       swaccess: "rw",
@@ -218,7 +217,7 @@
       fields: [
         { bits: "2:0" }
       ],
-    }
+    },
     { name: "PRIO18",
       desc: "Interrupt Source 18 Priority",
       swaccess: "rw",
@@ -226,7 +225,7 @@
       fields: [
         { bits: "2:0" }
       ],
-    }
+    },
     { name: "PRIO19",
       desc: "Interrupt Source 19 Priority",
       swaccess: "rw",
@@ -234,7 +233,7 @@
       fields: [
         { bits: "2:0" }
       ],
-    }
+    },
     { name: "PRIO20",
       desc: "Interrupt Source 20 Priority",
       swaccess: "rw",
@@ -242,7 +241,7 @@
       fields: [
         { bits: "2:0" }
       ],
-    }
+    },
     { name: "PRIO21",
       desc: "Interrupt Source 21 Priority",
       swaccess: "rw",
@@ -250,7 +249,7 @@
       fields: [
         { bits: "2:0" }
       ],
-    }
+    },
     { name: "PRIO22",
       desc: "Interrupt Source 22 Priority",
       swaccess: "rw",
@@ -258,7 +257,7 @@
       fields: [
         { bits: "2:0" }
       ],
-    }
+    },
     { name: "PRIO23",
       desc: "Interrupt Source 23 Priority",
       swaccess: "rw",
@@ -266,7 +265,7 @@
       fields: [
         { bits: "2:0" }
       ],
-    }
+    },
     { name: "PRIO24",
       desc: "Interrupt Source 24 Priority",
       swaccess: "rw",
@@ -274,7 +273,7 @@
       fields: [
         { bits: "2:0" }
       ],
-    }
+    },
     { name: "PRIO25",
       desc: "Interrupt Source 25 Priority",
       swaccess: "rw",
@@ -282,7 +281,7 @@
       fields: [
         { bits: "2:0" }
       ],
-    }
+    },
     { name: "PRIO26",
       desc: "Interrupt Source 26 Priority",
       swaccess: "rw",
@@ -290,7 +289,7 @@
       fields: [
         { bits: "2:0" }
       ],
-    }
+    },
     { name: "PRIO27",
       desc: "Interrupt Source 27 Priority",
       swaccess: "rw",
@@ -298,7 +297,7 @@
       fields: [
         { bits: "2:0" }
       ],
-    }
+    },
     { name: "PRIO28",
       desc: "Interrupt Source 28 Priority",
       swaccess: "rw",
@@ -306,7 +305,7 @@
       fields: [
         { bits: "2:0" }
       ],
-    }
+    },
     { name: "PRIO29",
       desc: "Interrupt Source 29 Priority",
       swaccess: "rw",
@@ -314,7 +313,7 @@
       fields: [
         { bits: "2:0" }
       ],
-    }
+    },
     { name: "PRIO30",
       desc: "Interrupt Source 30 Priority",
       swaccess: "rw",
@@ -322,7 +321,7 @@
       fields: [
         { bits: "2:0" }
       ],
-    }
+    },
     { name: "PRIO31",
       desc: "Interrupt Source 31 Priority",
       swaccess: "rw",
@@ -330,8 +329,35 @@
       fields: [
         { bits: "2:0" }
       ],
-    }
-    { skipto: "256" }
+    },
+    { skipto: "0x1000" }
+    { multireg: {
+        name: "IP",
+        desc: "Interrupt Pending",
+        count: "NumSrc",
+        cname: "RV_PLIC",
+        swaccess: "ro",
+        hwaccess: "hwo",
+        fields: [
+          { bits: "0", name: "P", desc: "Interrupt Pending of Source" }
+        ],
+        tags: [// IP is driven by intr_src, cannot auto-predict
+               "excl:CsrNonInitTests:CsrExclCheck"],
+      }
+    },
+    { multireg: {
+        name: "LE",
+        desc: "Interrupt Source mode. 0: Level, 1: Edge-triggered",
+        count: "NumSrc",
+        cname: "RV_PLIC",
+        swaccess: "rw",
+        hwaccess: "hro",
+        fields: [
+          { bits: "0", name: "LE", desc: "L0E1" }
+        ],
+      }
+    },
+    { skipto: "8192" }
     { multireg: {
         name: "IE0",
         desc: "Interrupt Enable for Target 0",
@@ -344,6 +370,7 @@
         ],
       }
     }
+    { skipto: "2097152" }
     { name: "THRESHOLD0",
       desc: "Threshold of priority for Target 0",
       swaccess: "rw",
@@ -377,7 +404,7 @@
         }
       ],
     }
-  { skipto: "512" }
+  { skipto: "2101248" }
   { name: "ALERT_TEST",
       desc: '''Alert Test Register.''',
       swaccess: "wo",
diff --git a/rtl/rv_plic.sv b/rtl/rv_plic.sv
index 387fb65..2476f52 100644
--- a/rtl/rv_plic.sv
+++ b/rtl/rv_plic.sv
@@ -14,8 +14,11 @@
 // Verilog parameter
 //   MAX_PRIO: Maximum value of interrupt priority
 
+`include "common_cells/assertions.svh"
+
 module rv_plic import rv_plic_reg_pkg::*; #(
-  parameter logic [NumAlerts-1:0] AlertAsyncOn = {NumAlerts{1'b1}},
+  parameter type reg_req_t = logic,
+  parameter type reg_rsp_t = logic,
   // derived parameter
   localparam int SRCW    = $clog2(NumSrc)
 ) (
@@ -23,16 +26,12 @@ module rv_plic import rv_plic_reg_pkg::*; #(
   input     rst_ni,
 
   // Bus Interface (device)
-  input  tlul_pkg::tl_h2d_t tl_i,
-  output tlul_pkg::tl_d2h_t tl_o,
+  input  reg_req_t reg_req_i,
+  output reg_rsp_t reg_rsp_o,
 
   // Interrupt Sources
   input  [NumSrc-1:0] intr_src_i,
 
-  // Alerts
-  input  prim_alert_pkg::alert_rx_t [NumAlerts-1:0] alert_rx_i,
-  output prim_alert_pkg::alert_tx_t [NumAlerts-1:0] alert_tx_o,
-
   // Interrupt notification to targets
   output [NumTarget-1:0] irq_o,
   output [SRCW-1:0]      irq_id_o [NumTarget],
@@ -206,56 +205,28 @@ module rv_plic import rv_plic_reg_pkg::*; #(
     );
   end
 
-  ////////////
-  // Alerts //
-  ////////////
-
-  logic [NumAlerts-1:0] alert_test, alerts;
-
-  assign alert_test = {
-    reg2hw.alert_test.q &
-    reg2hw.alert_test.qe
-  };
-
-  for (genvar i = 0; i < NumAlerts; i++) begin : gen_alert_tx
-    prim_alert_sender #(
-      .AsyncOn(AlertAsyncOn[i]),
-      .IsFatal(1'b1)
-    ) u_prim_alert_sender (
-      .clk_i,
-      .rst_ni,
-      .alert_test_i  ( alert_test[i] ),
-      .alert_req_i   ( alerts[0]     ),
-      .alert_ack_o   (               ),
-      .alert_state_o (               ),
-      .alert_rx_i    ( alert_rx_i[i] ),
-      .alert_tx_o    ( alert_tx_o[i] )
-    );
-  end
-
   ////////////////////////
   // Register interface //
   ////////////////////////
   //  Limitation of register tool prevents the module from having flexibility to parameters
   //  So, signals are manually tied at the top.
-  rv_plic_reg_top u_reg (
+  rv_plic_reg_top #(
+    .reg_req_t (reg_req_t),
+    .reg_rsp_t (reg_rsp_t)
+  ) u_reg (
     .clk_i,
     .rst_ni,
 
-    .tl_i,
-    .tl_o,
+    .reg_req_i,
+    .reg_rsp_o,
 
     .reg2hw,
     .hw2reg,
 
-    .intg_err_o(alerts[0]),
-
     .devmode_i  (1'b1)
   );
 
   // Assertions
-  `ASSERT_KNOWN(TlDValidKnownO_A, tl_o.d_valid)
-  `ASSERT_KNOWN(TlAReadyKnownO_A, tl_o.a_ready)
   `ASSERT_KNOWN(IrqKnownO_A, irq_o)
   `ASSERT_KNOWN(MsipKnownO_A, msip_o)
   for (genvar k = 0; k < NumTarget; k++) begin : gen_irq_id_known
diff --git a/rtl/rv_plic_reg_pkg.sv b/rtl/rv_plic_reg_pkg.sv
index be52220..974973b 100644
--- a/rtl/rv_plic_reg_pkg.sv
+++ b/rtl/rv_plic_reg_pkg.sv
@@ -13,16 +13,12 @@ package rv_plic_reg_pkg;
   parameter int NumAlerts = 1;
 
   // Address widths within the block
-  parameter int BlockAw = 10;
+  parameter int BlockAw = 22;
 
   ////////////////////////////
   // Typedefs for registers //
   ////////////////////////////
 
-  typedef struct packed {
-    logic        q;
-  } rv_plic_reg2hw_le_mreg_t;
-
   typedef struct packed {
     logic [2:0]  q;
   } rv_plic_reg2hw_prio0_reg_t;
@@ -151,6 +147,10 @@ package rv_plic_reg_pkg;
     logic [2:0]  q;
   } rv_plic_reg2hw_prio31_reg_t;
 
+  typedef struct packed {
+    logic        q;
+  } rv_plic_reg2hw_le_mreg_t;
+
   typedef struct packed {
     logic        q;
   } rv_plic_reg2hw_ie0_mreg_t;
@@ -185,39 +185,39 @@ package rv_plic_reg_pkg;
 
   // Register -> HW type
   typedef struct packed {
-    rv_plic_reg2hw_le_mreg_t [31:0] le; // [172:141]
-    rv_plic_reg2hw_prio0_reg_t prio0; // [140:138]
-    rv_plic_reg2hw_prio1_reg_t prio1; // [137:135]
-    rv_plic_reg2hw_prio2_reg_t prio2; // [134:132]
-    rv_plic_reg2hw_prio3_reg_t prio3; // [131:129]
-    rv_plic_reg2hw_prio4_reg_t prio4; // [128:126]
-    rv_plic_reg2hw_prio5_reg_t prio5; // [125:123]
-    rv_plic_reg2hw_prio6_reg_t prio6; // [122:120]
-    rv_plic_reg2hw_prio7_reg_t prio7; // [119:117]
-    rv_plic_reg2hw_prio8_reg_t prio8; // [116:114]
-    rv_plic_reg2hw_prio9_reg_t prio9; // [113:111]
-    rv_plic_reg2hw_prio10_reg_t prio10; // [110:108]
-    rv_plic_reg2hw_prio11_reg_t prio11; // [107:105]
-    rv_plic_reg2hw_prio12_reg_t prio12; // [104:102]
-    rv_plic_reg2hw_prio13_reg_t prio13; // [101:99]
-    rv_plic_reg2hw_prio14_reg_t prio14; // [98:96]
-    rv_plic_reg2hw_prio15_reg_t prio15; // [95:93]
-    rv_plic_reg2hw_prio16_reg_t prio16; // [92:90]
-    rv_plic_reg2hw_prio17_reg_t prio17; // [89:87]
-    rv_plic_reg2hw_prio18_reg_t prio18; // [86:84]
-    rv_plic_reg2hw_prio19_reg_t prio19; // [83:81]
-    rv_plic_reg2hw_prio20_reg_t prio20; // [80:78]
-    rv_plic_reg2hw_prio21_reg_t prio21; // [77:75]
-    rv_plic_reg2hw_prio22_reg_t prio22; // [74:72]
-    rv_plic_reg2hw_prio23_reg_t prio23; // [71:69]
-    rv_plic_reg2hw_prio24_reg_t prio24; // [68:66]
-    rv_plic_reg2hw_prio25_reg_t prio25; // [65:63]
-    rv_plic_reg2hw_prio26_reg_t prio26; // [62:60]
-    rv_plic_reg2hw_prio27_reg_t prio27; // [59:57]
-    rv_plic_reg2hw_prio28_reg_t prio28; // [56:54]
-    rv_plic_reg2hw_prio29_reg_t prio29; // [53:51]
-    rv_plic_reg2hw_prio30_reg_t prio30; // [50:48]
-    rv_plic_reg2hw_prio31_reg_t prio31; // [47:45]
+    rv_plic_reg2hw_prio0_reg_t prio0; // [172:170]
+    rv_plic_reg2hw_prio1_reg_t prio1; // [169:167]
+    rv_plic_reg2hw_prio2_reg_t prio2; // [166:164]
+    rv_plic_reg2hw_prio3_reg_t prio3; // [163:161]
+    rv_plic_reg2hw_prio4_reg_t prio4; // [160:158]
+    rv_plic_reg2hw_prio5_reg_t prio5; // [157:155]
+    rv_plic_reg2hw_prio6_reg_t prio6; // [154:152]
+    rv_plic_reg2hw_prio7_reg_t prio7; // [151:149]
+    rv_plic_reg2hw_prio8_reg_t prio8; // [148:146]
+    rv_plic_reg2hw_prio9_reg_t prio9; // [145:143]
+    rv_plic_reg2hw_prio10_reg_t prio10; // [142:140]
+    rv_plic_reg2hw_prio11_reg_t prio11; // [139:137]
+    rv_plic_reg2hw_prio12_reg_t prio12; // [136:134]
+    rv_plic_reg2hw_prio13_reg_t prio13; // [133:131]
+    rv_plic_reg2hw_prio14_reg_t prio14; // [130:128]
+    rv_plic_reg2hw_prio15_reg_t prio15; // [127:125]
+    rv_plic_reg2hw_prio16_reg_t prio16; // [124:122]
+    rv_plic_reg2hw_prio17_reg_t prio17; // [121:119]
+    rv_plic_reg2hw_prio18_reg_t prio18; // [118:116]
+    rv_plic_reg2hw_prio19_reg_t prio19; // [115:113]
+    rv_plic_reg2hw_prio20_reg_t prio20; // [112:110]
+    rv_plic_reg2hw_prio21_reg_t prio21; // [109:107]
+    rv_plic_reg2hw_prio22_reg_t prio22; // [106:104]
+    rv_plic_reg2hw_prio23_reg_t prio23; // [103:101]
+    rv_plic_reg2hw_prio24_reg_t prio24; // [100:98]
+    rv_plic_reg2hw_prio25_reg_t prio25; // [97:95]
+    rv_plic_reg2hw_prio26_reg_t prio26; // [94:92]
+    rv_plic_reg2hw_prio27_reg_t prio27; // [91:89]
+    rv_plic_reg2hw_prio28_reg_t prio28; // [88:86]
+    rv_plic_reg2hw_prio29_reg_t prio29; // [85:83]
+    rv_plic_reg2hw_prio30_reg_t prio30; // [82:80]
+    rv_plic_reg2hw_prio31_reg_t prio31; // [79:77]
+    rv_plic_reg2hw_le_mreg_t [31:0] le; // [76:45]
     rv_plic_reg2hw_ie0_mreg_t [31:0] ie0; // [44:13]
     rv_plic_reg2hw_threshold0_reg_t threshold0; // [12:10]
     rv_plic_reg2hw_cc0_reg_t cc0; // [9:3]
@@ -232,45 +232,45 @@ package rv_plic_reg_pkg;
   } rv_plic_hw2reg_t;
 
   // Register offsets
-  parameter logic [BlockAw-1:0] RV_PLIC_IP_OFFSET = 10'h 0;
-  parameter logic [BlockAw-1:0] RV_PLIC_LE_OFFSET = 10'h 4;
-  parameter logic [BlockAw-1:0] RV_PLIC_PRIO0_OFFSET = 10'h 8;
-  parameter logic [BlockAw-1:0] RV_PLIC_PRIO1_OFFSET = 10'h c;
-  parameter logic [BlockAw-1:0] RV_PLIC_PRIO2_OFFSET = 10'h 10;
-  parameter logic [BlockAw-1:0] RV_PLIC_PRIO3_OFFSET = 10'h 14;
-  parameter logic [BlockAw-1:0] RV_PLIC_PRIO4_OFFSET = 10'h 18;
-  parameter logic [BlockAw-1:0] RV_PLIC_PRIO5_OFFSET = 10'h 1c;
-  parameter logic [BlockAw-1:0] RV_PLIC_PRIO6_OFFSET = 10'h 20;
-  parameter logic [BlockAw-1:0] RV_PLIC_PRIO7_OFFSET = 10'h 24;
-  parameter logic [BlockAw-1:0] RV_PLIC_PRIO8_OFFSET = 10'h 28;
-  parameter logic [BlockAw-1:0] RV_PLIC_PRIO9_OFFSET = 10'h 2c;
-  parameter logic [BlockAw-1:0] RV_PLIC_PRIO10_OFFSET = 10'h 30;
-  parameter logic [BlockAw-1:0] RV_PLIC_PRIO11_OFFSET = 10'h 34;
-  parameter logic [BlockAw-1:0] RV_PLIC_PRIO12_OFFSET = 10'h 38;
-  parameter logic [BlockAw-1:0] RV_PLIC_PRIO13_OFFSET = 10'h 3c;
-  parameter logic [BlockAw-1:0] RV_PLIC_PRIO14_OFFSET = 10'h 40;
-  parameter logic [BlockAw-1:0] RV_PLIC_PRIO15_OFFSET = 10'h 44;
-  parameter logic [BlockAw-1:0] RV_PLIC_PRIO16_OFFSET = 10'h 48;
-  parameter logic [BlockAw-1:0] RV_PLIC_PRIO17_OFFSET = 10'h 4c;
-  parameter logic [BlockAw-1:0] RV_PLIC_PRIO18_OFFSET = 10'h 50;
-  parameter logic [BlockAw-1:0] RV_PLIC_PRIO19_OFFSET = 10'h 54;
-  parameter logic [BlockAw-1:0] RV_PLIC_PRIO20_OFFSET = 10'h 58;
-  parameter logic [BlockAw-1:0] RV_PLIC_PRIO21_OFFSET = 10'h 5c;
-  parameter logic [BlockAw-1:0] RV_PLIC_PRIO22_OFFSET = 10'h 60;
-  parameter logic [BlockAw-1:0] RV_PLIC_PRIO23_OFFSET = 10'h 64;
-  parameter logic [BlockAw-1:0] RV_PLIC_PRIO24_OFFSET = 10'h 68;
-  parameter logic [BlockAw-1:0] RV_PLIC_PRIO25_OFFSET = 10'h 6c;
-  parameter logic [BlockAw-1:0] RV_PLIC_PRIO26_OFFSET = 10'h 70;
-  parameter logic [BlockAw-1:0] RV_PLIC_PRIO27_OFFSET = 10'h 74;
-  parameter logic [BlockAw-1:0] RV_PLIC_PRIO28_OFFSET = 10'h 78;
-  parameter logic [BlockAw-1:0] RV_PLIC_PRIO29_OFFSET = 10'h 7c;
-  parameter logic [BlockAw-1:0] RV_PLIC_PRIO30_OFFSET = 10'h 80;
-  parameter logic [BlockAw-1:0] RV_PLIC_PRIO31_OFFSET = 10'h 84;
-  parameter logic [BlockAw-1:0] RV_PLIC_IE0_OFFSET = 10'h 100;
-  parameter logic [BlockAw-1:0] RV_PLIC_THRESHOLD0_OFFSET = 10'h 104;
-  parameter logic [BlockAw-1:0] RV_PLIC_CC0_OFFSET = 10'h 108;
-  parameter logic [BlockAw-1:0] RV_PLIC_MSIP0_OFFSET = 10'h 10c;
-  parameter logic [BlockAw-1:0] RV_PLIC_ALERT_TEST_OFFSET = 10'h 200;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO0_OFFSET = 22'h 0;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO1_OFFSET = 22'h 4;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO2_OFFSET = 22'h 8;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO3_OFFSET = 22'h c;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO4_OFFSET = 22'h 10;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO5_OFFSET = 22'h 14;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO6_OFFSET = 22'h 18;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO7_OFFSET = 22'h 1c;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO8_OFFSET = 22'h 20;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO9_OFFSET = 22'h 24;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO10_OFFSET = 22'h 28;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO11_OFFSET = 22'h 2c;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO12_OFFSET = 22'h 30;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO13_OFFSET = 22'h 34;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO14_OFFSET = 22'h 38;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO15_OFFSET = 22'h 3c;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO16_OFFSET = 22'h 40;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO17_OFFSET = 22'h 44;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO18_OFFSET = 22'h 48;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO19_OFFSET = 22'h 4c;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO20_OFFSET = 22'h 50;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO21_OFFSET = 22'h 54;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO22_OFFSET = 22'h 58;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO23_OFFSET = 22'h 5c;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO24_OFFSET = 22'h 60;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO25_OFFSET = 22'h 64;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO26_OFFSET = 22'h 68;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO27_OFFSET = 22'h 6c;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO28_OFFSET = 22'h 70;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO29_OFFSET = 22'h 74;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO30_OFFSET = 22'h 78;
+  parameter logic [BlockAw-1:0] RV_PLIC_PRIO31_OFFSET = 22'h 7c;
+  parameter logic [BlockAw-1:0] RV_PLIC_IP_OFFSET = 22'h 1000;
+  parameter logic [BlockAw-1:0] RV_PLIC_LE_OFFSET = 22'h 1004;
+  parameter logic [BlockAw-1:0] RV_PLIC_IE0_OFFSET = 22'h 2000;
+  parameter logic [BlockAw-1:0] RV_PLIC_THRESHOLD0_OFFSET = 22'h 200000;
+  parameter logic [BlockAw-1:0] RV_PLIC_CC0_OFFSET = 22'h 200004;
+  parameter logic [BlockAw-1:0] RV_PLIC_MSIP0_OFFSET = 22'h 200008;
+  parameter logic [BlockAw-1:0] RV_PLIC_ALERT_TEST_OFFSET = 22'h 201000;
 
   // Reset values for hwext registers and their fields
   parameter logic [4:0] RV_PLIC_CC0_RESVAL = 5'h 0;
@@ -278,8 +278,6 @@ package rv_plic_reg_pkg;
 
   // Register index
   typedef enum int {
-    RV_PLIC_IP,
-    RV_PLIC_LE,
     RV_PLIC_PRIO0,
     RV_PLIC_PRIO1,
     RV_PLIC_PRIO2,
@@ -312,6 +310,8 @@ package rv_plic_reg_pkg;
     RV_PLIC_PRIO29,
     RV_PLIC_PRIO30,
     RV_PLIC_PRIO31,
+    RV_PLIC_IP,
+    RV_PLIC_LE,
     RV_PLIC_IE0,
     RV_PLIC_THRESHOLD0,
     RV_PLIC_CC0,
@@ -321,40 +321,40 @@ package rv_plic_reg_pkg;
 
   // Register width information to check illegal writes
   parameter logic [3:0] RV_PLIC_PERMIT [39] = '{
-    4'b 1111, // index[ 0] RV_PLIC_IP
-    4'b 1111, // index[ 1] RV_PLIC_LE
-    4'b 0001, // index[ 2] RV_PLIC_PRIO0
-    4'b 0001, // index[ 3] RV_PLIC_PRIO1
-    4'b 0001, // index[ 4] RV_PLIC_PRIO2
-    4'b 0001, // index[ 5] RV_PLIC_PRIO3
-    4'b 0001, // index[ 6] RV_PLIC_PRIO4
-    4'b 0001, // index[ 7] RV_PLIC_PRIO5
-    4'b 0001, // index[ 8] RV_PLIC_PRIO6
-    4'b 0001, // index[ 9] RV_PLIC_PRIO7
-    4'b 0001, // index[10] RV_PLIC_PRIO8
-    4'b 0001, // index[11] RV_PLIC_PRIO9
-    4'b 0001, // index[12] RV_PLIC_PRIO10
-    4'b 0001, // index[13] RV_PLIC_PRIO11
-    4'b 0001, // index[14] RV_PLIC_PRIO12
-    4'b 0001, // index[15] RV_PLIC_PRIO13
-    4'b 0001, // index[16] RV_PLIC_PRIO14
-    4'b 0001, // index[17] RV_PLIC_PRIO15
-    4'b 0001, // index[18] RV_PLIC_PRIO16
-    4'b 0001, // index[19] RV_PLIC_PRIO17
-    4'b 0001, // index[20] RV_PLIC_PRIO18
-    4'b 0001, // index[21] RV_PLIC_PRIO19
-    4'b 0001, // index[22] RV_PLIC_PRIO20
-    4'b 0001, // index[23] RV_PLIC_PRIO21
-    4'b 0001, // index[24] RV_PLIC_PRIO22
-    4'b 0001, // index[25] RV_PLIC_PRIO23
-    4'b 0001, // index[26] RV_PLIC_PRIO24
-    4'b 0001, // index[27] RV_PLIC_PRIO25
-    4'b 0001, // index[28] RV_PLIC_PRIO26
-    4'b 0001, // index[29] RV_PLIC_PRIO27
-    4'b 0001, // index[30] RV_PLIC_PRIO28
-    4'b 0001, // index[31] RV_PLIC_PRIO29
-    4'b 0001, // index[32] RV_PLIC_PRIO30
-    4'b 0001, // index[33] RV_PLIC_PRIO31
+    4'b 0001, // index[ 0] RV_PLIC_PRIO0
+    4'b 0001, // index[ 1] RV_PLIC_PRIO1
+    4'b 0001, // index[ 2] RV_PLIC_PRIO2
+    4'b 0001, // index[ 3] RV_PLIC_PRIO3
+    4'b 0001, // index[ 4] RV_PLIC_PRIO4
+    4'b 0001, // index[ 5] RV_PLIC_PRIO5
+    4'b 0001, // index[ 6] RV_PLIC_PRIO6
+    4'b 0001, // index[ 7] RV_PLIC_PRIO7
+    4'b 0001, // index[ 8] RV_PLIC_PRIO8
+    4'b 0001, // index[ 9] RV_PLIC_PRIO9
+    4'b 0001, // index[10] RV_PLIC_PRIO10
+    4'b 0001, // index[11] RV_PLIC_PRIO11
+    4'b 0001, // index[12] RV_PLIC_PRIO12
+    4'b 0001, // index[13] RV_PLIC_PRIO13
+    4'b 0001, // index[14] RV_PLIC_PRIO14
+    4'b 0001, // index[15] RV_PLIC_PRIO15
+    4'b 0001, // index[16] RV_PLIC_PRIO16
+    4'b 0001, // index[17] RV_PLIC_PRIO17
+    4'b 0001, // index[18] RV_PLIC_PRIO18
+    4'b 0001, // index[19] RV_PLIC_PRIO19
+    4'b 0001, // index[20] RV_PLIC_PRIO20
+    4'b 0001, // index[21] RV_PLIC_PRIO21
+    4'b 0001, // index[22] RV_PLIC_PRIO22
+    4'b 0001, // index[23] RV_PLIC_PRIO23
+    4'b 0001, // index[24] RV_PLIC_PRIO24
+    4'b 0001, // index[25] RV_PLIC_PRIO25
+    4'b 0001, // index[26] RV_PLIC_PRIO26
+    4'b 0001, // index[27] RV_PLIC_PRIO27
+    4'b 0001, // index[28] RV_PLIC_PRIO28
+    4'b 0001, // index[29] RV_PLIC_PRIO29
+    4'b 0001, // index[30] RV_PLIC_PRIO30
+    4'b 0001, // index[31] RV_PLIC_PRIO31
+    4'b 1111, // index[32] RV_PLIC_IP
+    4'b 1111, // index[33] RV_PLIC_LE
     4'b 1111, // index[34] RV_PLIC_IE0
     4'b 0001, // index[35] RV_PLIC_THRESHOLD0
     4'b 0001, // index[36] RV_PLIC_CC0
diff --git a/rtl/rv_plic_reg_top.sv b/rtl/rv_plic_reg_top.sv
index 12aa254..6647b9a 100644
--- a/rtl/rv_plic_reg_top.sv
+++ b/rtl/rv_plic_reg_top.sv
@@ -4,20 +4,22 @@
 //
 // Register Top module auto-generated by `reggen`
 
-`include "prim_assert.sv"
 
-module rv_plic_reg_top (
+`include "common_cells/assertions.svh"
+
+module rv_plic_reg_top #(
+    parameter type reg_req_t = logic,
+    parameter type reg_rsp_t = logic,
+    parameter int AW = 22
+) (
   input clk_i,
   input rst_ni,
-
-  input  tlul_pkg::tl_h2d_t tl_i,
-  output tlul_pkg::tl_d2h_t tl_o,
+  input  reg_req_t reg_req_i,
+  output reg_rsp_t reg_rsp_o,
   // To HW
   output rv_plic_reg_pkg::rv_plic_reg2hw_t reg2hw, // Write
   input  rv_plic_reg_pkg::rv_plic_hw2reg_t hw2reg, // Read
 
-  // Integrity check errors
-  output logic intg_err_o,
 
   // Config
   input devmode_i // If 1, explicit error return for unmapped register access
@@ -25,7 +27,6 @@ module rv_plic_reg_top (
 
   import rv_plic_reg_pkg::* ;
 
-  localparam int AW = 10;
   localparam int DW = 32;
   localparam int DBW = DW/8;                    // Byte Width
 
@@ -41,74 +42,128 @@ module rv_plic_reg_top (
   logic          addrmiss, wr_err;
 
   logic [DW-1:0] reg_rdata_next;
-  logic reg_busy;
-
-  tlul_pkg::tl_h2d_t tl_reg_h2d;
-  tlul_pkg::tl_d2h_t tl_reg_d2h;
-
-
-  // incoming payload check
-  logic intg_err;
-  tlul_cmd_intg_chk u_chk (
-    .tl_i(tl_i),
-    .err_o(intg_err)
-  );
-
-  logic intg_err_q;
-  always_ff @(posedge clk_i or negedge rst_ni) begin
-    if (!rst_ni) begin
-      intg_err_q <= '0;
-    end else if (intg_err) begin
-      intg_err_q <= 1'b1;
-    end
-  end
 
-  // integrity error output is permanent and should be used for alert generation
-  // register errors are transactional
-  assign intg_err_o = intg_err_q | intg_err;
+  // Below register interface can be changed
+  reg_req_t  reg_intf_req;
+  reg_rsp_t  reg_intf_rsp;
 
-  // outgoing integrity generation
-  tlul_pkg::tl_d2h_t tl_o_pre;
-  tlul_rsp_intg_gen #(
-    .EnableRspIntgGen(1),
-    .EnableDataIntgGen(1)
-  ) u_rsp_intg_gen (
-    .tl_i(tl_o_pre),
-    .tl_o(tl_o)
-  );
-
-  assign tl_reg_h2d = tl_i;
-  assign tl_o_pre   = tl_reg_d2h;
 
-  tlul_adapter_reg #(
-    .RegAw(AW),
-    .RegDw(DW),
-    .EnableDataIntgGen(0)
-  ) u_reg_if (
-    .clk_i  (clk_i),
-    .rst_ni (rst_ni),
+  assign reg_intf_req = reg_req_i;
+  assign reg_rsp_o = reg_intf_rsp;
 
-    .tl_i (tl_reg_h2d),
-    .tl_o (tl_reg_d2h),
-
-    .we_o    (reg_we),
-    .re_o    (reg_re),
-    .addr_o  (reg_addr),
-    .wdata_o (reg_wdata),
-    .be_o    (reg_be),
-    .busy_i  (reg_busy),
-    .rdata_i (reg_rdata),
-    .error_i (reg_error)
-  );
 
-  // cdc oversampling signals
+  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
+  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
+  assign reg_addr = reg_intf_req.addr;
+  assign reg_wdata = reg_intf_req.wdata;
+  assign reg_be = reg_intf_req.wstrb;
+  assign reg_intf_rsp.rdata = reg_rdata;
+  assign reg_intf_rsp.error = reg_error;
+  assign reg_intf_rsp.ready = 1'b1;
 
   assign reg_rdata = reg_rdata_next ;
-  assign reg_error = (devmode_i & addrmiss) | wr_err | intg_err;
+  assign reg_error = (devmode_i & addrmiss) | wr_err;
+
 
   // Define SW related signals
   // Format: <reg>_<field>_{wd|we|qs}
   //        or <reg>_{wd|we|qs} if field == 1 or 0
+  logic [2:0] prio0_qs;
+  logic [2:0] prio0_wd;
+  logic prio0_we;
+  logic [2:0] prio1_qs;
+  logic [2:0] prio1_wd;
+  logic prio1_we;
+  logic [2:0] prio2_qs;
+  logic [2:0] prio2_wd;
+  logic prio2_we;
+  logic [2:0] prio3_qs;
+  logic [2:0] prio3_wd;
+  logic prio3_we;
+  logic [2:0] prio4_qs;
+  logic [2:0] prio4_wd;
+  logic prio4_we;
+  logic [2:0] prio5_qs;
+  logic [2:0] prio5_wd;
+  logic prio5_we;
+  logic [2:0] prio6_qs;
+  logic [2:0] prio6_wd;
+  logic prio6_we;
+  logic [2:0] prio7_qs;
+  logic [2:0] prio7_wd;
+  logic prio7_we;
+  logic [2:0] prio8_qs;
+  logic [2:0] prio8_wd;
+  logic prio8_we;
+  logic [2:0] prio9_qs;
+  logic [2:0] prio9_wd;
+  logic prio9_we;
+  logic [2:0] prio10_qs;
+  logic [2:0] prio10_wd;
+  logic prio10_we;
+  logic [2:0] prio11_qs;
+  logic [2:0] prio11_wd;
+  logic prio11_we;
+  logic [2:0] prio12_qs;
+  logic [2:0] prio12_wd;
+  logic prio12_we;
+  logic [2:0] prio13_qs;
+  logic [2:0] prio13_wd;
+  logic prio13_we;
+  logic [2:0] prio14_qs;
+  logic [2:0] prio14_wd;
+  logic prio14_we;
+  logic [2:0] prio15_qs;
+  logic [2:0] prio15_wd;
+  logic prio15_we;
+  logic [2:0] prio16_qs;
+  logic [2:0] prio16_wd;
+  logic prio16_we;
+  logic [2:0] prio17_qs;
+  logic [2:0] prio17_wd;
+  logic prio17_we;
+  logic [2:0] prio18_qs;
+  logic [2:0] prio18_wd;
+  logic prio18_we;
+  logic [2:0] prio19_qs;
+  logic [2:0] prio19_wd;
+  logic prio19_we;
+  logic [2:0] prio20_qs;
+  logic [2:0] prio20_wd;
+  logic prio20_we;
+  logic [2:0] prio21_qs;
+  logic [2:0] prio21_wd;
+  logic prio21_we;
+  logic [2:0] prio22_qs;
+  logic [2:0] prio22_wd;
+  logic prio22_we;
+  logic [2:0] prio23_qs;
+  logic [2:0] prio23_wd;
+  logic prio23_we;
+  logic [2:0] prio24_qs;
+  logic [2:0] prio24_wd;
+  logic prio24_we;
+  logic [2:0] prio25_qs;
+  logic [2:0] prio25_wd;
+  logic prio25_we;
+  logic [2:0] prio26_qs;
+  logic [2:0] prio26_wd;
+  logic prio26_we;
+  logic [2:0] prio27_qs;
+  logic [2:0] prio27_wd;
+  logic prio27_we;
+  logic [2:0] prio28_qs;
+  logic [2:0] prio28_wd;
+  logic prio28_we;
+  logic [2:0] prio29_qs;
+  logic [2:0] prio29_wd;
+  logic prio29_we;
+  logic [2:0] prio30_qs;
+  logic [2:0] prio30_wd;
+  logic prio30_we;
+  logic [2:0] prio31_qs;
+  logic [2:0] prio31_wd;
+  logic prio31_we;
   logic ip_p_0_qs;
   logic ip_p_1_qs;
   logic ip_p_2_qs;
@@ -141,2808 +196,2742 @@ module rv_plic_reg_top (
   logic ip_p_29_qs;
   logic ip_p_30_qs;
   logic ip_p_31_qs;
-  logic le_we;
   logic le_le_0_qs;
   logic le_le_0_wd;
+  logic le_le_0_we;
   logic le_le_1_qs;
   logic le_le_1_wd;
+  logic le_le_1_we;
   logic le_le_2_qs;
   logic le_le_2_wd;
+  logic le_le_2_we;
   logic le_le_3_qs;
   logic le_le_3_wd;
+  logic le_le_3_we;
   logic le_le_4_qs;
   logic le_le_4_wd;
+  logic le_le_4_we;
   logic le_le_5_qs;
   logic le_le_5_wd;
+  logic le_le_5_we;
   logic le_le_6_qs;
   logic le_le_6_wd;
+  logic le_le_6_we;
   logic le_le_7_qs;
   logic le_le_7_wd;
+  logic le_le_7_we;
   logic le_le_8_qs;
   logic le_le_8_wd;
+  logic le_le_8_we;
   logic le_le_9_qs;
   logic le_le_9_wd;
+  logic le_le_9_we;
   logic le_le_10_qs;
   logic le_le_10_wd;
+  logic le_le_10_we;
   logic le_le_11_qs;
   logic le_le_11_wd;
+  logic le_le_11_we;
   logic le_le_12_qs;
   logic le_le_12_wd;
+  logic le_le_12_we;
   logic le_le_13_qs;
   logic le_le_13_wd;
+  logic le_le_13_we;
   logic le_le_14_qs;
   logic le_le_14_wd;
+  logic le_le_14_we;
   logic le_le_15_qs;
   logic le_le_15_wd;
+  logic le_le_15_we;
   logic le_le_16_qs;
   logic le_le_16_wd;
+  logic le_le_16_we;
   logic le_le_17_qs;
   logic le_le_17_wd;
+  logic le_le_17_we;
   logic le_le_18_qs;
   logic le_le_18_wd;
+  logic le_le_18_we;
   logic le_le_19_qs;
   logic le_le_19_wd;
+  logic le_le_19_we;
   logic le_le_20_qs;
   logic le_le_20_wd;
+  logic le_le_20_we;
   logic le_le_21_qs;
   logic le_le_21_wd;
+  logic le_le_21_we;
   logic le_le_22_qs;
   logic le_le_22_wd;
+  logic le_le_22_we;
   logic le_le_23_qs;
   logic le_le_23_wd;
+  logic le_le_23_we;
   logic le_le_24_qs;
   logic le_le_24_wd;
+  logic le_le_24_we;
   logic le_le_25_qs;
   logic le_le_25_wd;
+  logic le_le_25_we;
   logic le_le_26_qs;
   logic le_le_26_wd;
+  logic le_le_26_we;
   logic le_le_27_qs;
   logic le_le_27_wd;
+  logic le_le_27_we;
   logic le_le_28_qs;
   logic le_le_28_wd;
+  logic le_le_28_we;
   logic le_le_29_qs;
   logic le_le_29_wd;
+  logic le_le_29_we;
   logic le_le_30_qs;
   logic le_le_30_wd;
+  logic le_le_30_we;
   logic le_le_31_qs;
   logic le_le_31_wd;
-  logic prio0_we;
-  logic [2:0] prio0_qs;
-  logic [2:0] prio0_wd;
-  logic prio1_we;
-  logic [2:0] prio1_qs;
-  logic [2:0] prio1_wd;
-  logic prio2_we;
-  logic [2:0] prio2_qs;
-  logic [2:0] prio2_wd;
-  logic prio3_we;
-  logic [2:0] prio3_qs;
-  logic [2:0] prio3_wd;
-  logic prio4_we;
-  logic [2:0] prio4_qs;
-  logic [2:0] prio4_wd;
-  logic prio5_we;
-  logic [2:0] prio5_qs;
-  logic [2:0] prio5_wd;
-  logic prio6_we;
-  logic [2:0] prio6_qs;
-  logic [2:0] prio6_wd;
-  logic prio7_we;
-  logic [2:0] prio7_qs;
-  logic [2:0] prio7_wd;
-  logic prio8_we;
-  logic [2:0] prio8_qs;
-  logic [2:0] prio8_wd;
-  logic prio9_we;
-  logic [2:0] prio9_qs;
-  logic [2:0] prio9_wd;
-  logic prio10_we;
-  logic [2:0] prio10_qs;
-  logic [2:0] prio10_wd;
-  logic prio11_we;
-  logic [2:0] prio11_qs;
-  logic [2:0] prio11_wd;
-  logic prio12_we;
-  logic [2:0] prio12_qs;
-  logic [2:0] prio12_wd;
-  logic prio13_we;
-  logic [2:0] prio13_qs;
-  logic [2:0] prio13_wd;
-  logic prio14_we;
-  logic [2:0] prio14_qs;
-  logic [2:0] prio14_wd;
-  logic prio15_we;
-  logic [2:0] prio15_qs;
-  logic [2:0] prio15_wd;
-  logic prio16_we;
-  logic [2:0] prio16_qs;
-  logic [2:0] prio16_wd;
-  logic prio17_we;
-  logic [2:0] prio17_qs;
-  logic [2:0] prio17_wd;
-  logic prio18_we;
-  logic [2:0] prio18_qs;
-  logic [2:0] prio18_wd;
-  logic prio19_we;
-  logic [2:0] prio19_qs;
-  logic [2:0] prio19_wd;
-  logic prio20_we;
-  logic [2:0] prio20_qs;
-  logic [2:0] prio20_wd;
-  logic prio21_we;
-  logic [2:0] prio21_qs;
-  logic [2:0] prio21_wd;
-  logic prio22_we;
-  logic [2:0] prio22_qs;
-  logic [2:0] prio22_wd;
-  logic prio23_we;
-  logic [2:0] prio23_qs;
-  logic [2:0] prio23_wd;
-  logic prio24_we;
-  logic [2:0] prio24_qs;
-  logic [2:0] prio24_wd;
-  logic prio25_we;
-  logic [2:0] prio25_qs;
-  logic [2:0] prio25_wd;
-  logic prio26_we;
-  logic [2:0] prio26_qs;
-  logic [2:0] prio26_wd;
-  logic prio27_we;
-  logic [2:0] prio27_qs;
-  logic [2:0] prio27_wd;
-  logic prio28_we;
-  logic [2:0] prio28_qs;
-  logic [2:0] prio28_wd;
-  logic prio29_we;
-  logic [2:0] prio29_qs;
-  logic [2:0] prio29_wd;
-  logic prio30_we;
-  logic [2:0] prio30_qs;
-  logic [2:0] prio30_wd;
-  logic prio31_we;
-  logic [2:0] prio31_qs;
-  logic [2:0] prio31_wd;
-  logic ie0_we;
+  logic le_le_31_we;
   logic ie0_e_0_qs;
   logic ie0_e_0_wd;
+  logic ie0_e_0_we;
   logic ie0_e_1_qs;
   logic ie0_e_1_wd;
+  logic ie0_e_1_we;
   logic ie0_e_2_qs;
   logic ie0_e_2_wd;
+  logic ie0_e_2_we;
   logic ie0_e_3_qs;
   logic ie0_e_3_wd;
+  logic ie0_e_3_we;
   logic ie0_e_4_qs;
   logic ie0_e_4_wd;
+  logic ie0_e_4_we;
   logic ie0_e_5_qs;
   logic ie0_e_5_wd;
+  logic ie0_e_5_we;
   logic ie0_e_6_qs;
   logic ie0_e_6_wd;
+  logic ie0_e_6_we;
   logic ie0_e_7_qs;
   logic ie0_e_7_wd;
+  logic ie0_e_7_we;
   logic ie0_e_8_qs;
   logic ie0_e_8_wd;
+  logic ie0_e_8_we;
   logic ie0_e_9_qs;
   logic ie0_e_9_wd;
+  logic ie0_e_9_we;
   logic ie0_e_10_qs;
   logic ie0_e_10_wd;
+  logic ie0_e_10_we;
   logic ie0_e_11_qs;
   logic ie0_e_11_wd;
+  logic ie0_e_11_we;
   logic ie0_e_12_qs;
   logic ie0_e_12_wd;
+  logic ie0_e_12_we;
   logic ie0_e_13_qs;
   logic ie0_e_13_wd;
+  logic ie0_e_13_we;
   logic ie0_e_14_qs;
   logic ie0_e_14_wd;
+  logic ie0_e_14_we;
   logic ie0_e_15_qs;
   logic ie0_e_15_wd;
+  logic ie0_e_15_we;
   logic ie0_e_16_qs;
   logic ie0_e_16_wd;
+  logic ie0_e_16_we;
   logic ie0_e_17_qs;
   logic ie0_e_17_wd;
+  logic ie0_e_17_we;
   logic ie0_e_18_qs;
   logic ie0_e_18_wd;
+  logic ie0_e_18_we;
   logic ie0_e_19_qs;
   logic ie0_e_19_wd;
+  logic ie0_e_19_we;
   logic ie0_e_20_qs;
   logic ie0_e_20_wd;
+  logic ie0_e_20_we;
   logic ie0_e_21_qs;
   logic ie0_e_21_wd;
+  logic ie0_e_21_we;
   logic ie0_e_22_qs;
   logic ie0_e_22_wd;
+  logic ie0_e_22_we;
   logic ie0_e_23_qs;
   logic ie0_e_23_wd;
+  logic ie0_e_23_we;
   logic ie0_e_24_qs;
   logic ie0_e_24_wd;
+  logic ie0_e_24_we;
   logic ie0_e_25_qs;
   logic ie0_e_25_wd;
+  logic ie0_e_25_we;
   logic ie0_e_26_qs;
   logic ie0_e_26_wd;
+  logic ie0_e_26_we;
   logic ie0_e_27_qs;
   logic ie0_e_27_wd;
+  logic ie0_e_27_we;
   logic ie0_e_28_qs;
   logic ie0_e_28_wd;
+  logic ie0_e_28_we;
   logic ie0_e_29_qs;
   logic ie0_e_29_wd;
+  logic ie0_e_29_we;
   logic ie0_e_30_qs;
   logic ie0_e_30_wd;
+  logic ie0_e_30_we;
   logic ie0_e_31_qs;
   logic ie0_e_31_wd;
-  logic threshold0_we;
+  logic ie0_e_31_we;
   logic [2:0] threshold0_qs;
   logic [2:0] threshold0_wd;
-  logic cc0_re;
-  logic cc0_we;
+  logic threshold0_we;
   logic [4:0] cc0_qs;
   logic [4:0] cc0_wd;
-  logic msip0_we;
+  logic cc0_we;
+  logic cc0_re;
   logic msip0_qs;
   logic msip0_wd;
-  logic alert_test_we;
+  logic msip0_we;
   logic alert_test_wd;
+  logic alert_test_we;
 
   // Register instances
+  // R[prio0]: V(False)
 
-  // Subregister 0 of Multireg ip
-  // R[ip]: V(False)
-
-  // F[p_0]: 0:0
   prim_subreg #(
-    .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRO),
-    .RESVAL  (1'h0)
-  ) u_ip_p_0 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio0 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (1'b0),
-    .wd     ('0),
+    .we     (prio0_we),
+    .wd     (prio0_wd),
 
     // from internal hardware
-    .de     (hw2reg.ip[0].de),
-    .d      (hw2reg.ip[0].d),
+    .de     (1'b0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (),
+    .q      (reg2hw.prio0.q ),
 
     // to register interface (read)
-    .qs     (ip_p_0_qs)
+    .qs     (prio0_qs)
   );
 
 
-  // F[p_1]: 1:1
+  // R[prio1]: V(False)
+
   prim_subreg #(
-    .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRO),
-    .RESVAL  (1'h0)
-  ) u_ip_p_1 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio1 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (1'b0),
-    .wd     ('0),
+    .we     (prio1_we),
+    .wd     (prio1_wd),
 
     // from internal hardware
-    .de     (hw2reg.ip[1].de),
-    .d      (hw2reg.ip[1].d),
+    .de     (1'b0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (),
+    .q      (reg2hw.prio1.q ),
 
     // to register interface (read)
-    .qs     (ip_p_1_qs)
+    .qs     (prio1_qs)
   );
 
 
-  // F[p_2]: 2:2
+  // R[prio2]: V(False)
+
   prim_subreg #(
-    .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRO),
-    .RESVAL  (1'h0)
-  ) u_ip_p_2 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio2 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (1'b0),
-    .wd     ('0),
+    .we     (prio2_we),
+    .wd     (prio2_wd),
 
     // from internal hardware
-    .de     (hw2reg.ip[2].de),
-    .d      (hw2reg.ip[2].d),
+    .de     (1'b0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (),
+    .q      (reg2hw.prio2.q ),
 
     // to register interface (read)
-    .qs     (ip_p_2_qs)
+    .qs     (prio2_qs)
   );
 
 
-  // F[p_3]: 3:3
+  // R[prio3]: V(False)
+
   prim_subreg #(
-    .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRO),
-    .RESVAL  (1'h0)
-  ) u_ip_p_3 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio3 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (1'b0),
-    .wd     ('0),
+    .we     (prio3_we),
+    .wd     (prio3_wd),
 
     // from internal hardware
-    .de     (hw2reg.ip[3].de),
-    .d      (hw2reg.ip[3].d),
+    .de     (1'b0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (),
+    .q      (reg2hw.prio3.q ),
 
     // to register interface (read)
-    .qs     (ip_p_3_qs)
+    .qs     (prio3_qs)
   );
 
 
-  // F[p_4]: 4:4
+  // R[prio4]: V(False)
+
   prim_subreg #(
-    .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRO),
-    .RESVAL  (1'h0)
-  ) u_ip_p_4 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio4 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (1'b0),
-    .wd     ('0),
+    .we     (prio4_we),
+    .wd     (prio4_wd),
 
     // from internal hardware
-    .de     (hw2reg.ip[4].de),
-    .d      (hw2reg.ip[4].d),
+    .de     (1'b0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (),
+    .q      (reg2hw.prio4.q ),
 
     // to register interface (read)
-    .qs     (ip_p_4_qs)
+    .qs     (prio4_qs)
   );
 
 
-  // F[p_5]: 5:5
+  // R[prio5]: V(False)
+
   prim_subreg #(
-    .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRO),
-    .RESVAL  (1'h0)
-  ) u_ip_p_5 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio5 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (1'b0),
-    .wd     ('0),
+    .we     (prio5_we),
+    .wd     (prio5_wd),
 
     // from internal hardware
-    .de     (hw2reg.ip[5].de),
-    .d      (hw2reg.ip[5].d),
+    .de     (1'b0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (),
+    .q      (reg2hw.prio5.q ),
 
     // to register interface (read)
-    .qs     (ip_p_5_qs)
+    .qs     (prio5_qs)
   );
 
 
-  // F[p_6]: 6:6
+  // R[prio6]: V(False)
+
   prim_subreg #(
-    .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRO),
-    .RESVAL  (1'h0)
-  ) u_ip_p_6 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio6 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (1'b0),
-    .wd     ('0),
+    .we     (prio6_we),
+    .wd     (prio6_wd),
 
     // from internal hardware
-    .de     (hw2reg.ip[6].de),
-    .d      (hw2reg.ip[6].d),
+    .de     (1'b0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (),
+    .q      (reg2hw.prio6.q ),
 
     // to register interface (read)
-    .qs     (ip_p_6_qs)
+    .qs     (prio6_qs)
   );
 
 
-  // F[p_7]: 7:7
+  // R[prio7]: V(False)
+
   prim_subreg #(
-    .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRO),
-    .RESVAL  (1'h0)
-  ) u_ip_p_7 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio7 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (1'b0),
-    .wd     ('0),
+    .we     (prio7_we),
+    .wd     (prio7_wd),
 
     // from internal hardware
-    .de     (hw2reg.ip[7].de),
-    .d      (hw2reg.ip[7].d),
+    .de     (1'b0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (),
+    .q      (reg2hw.prio7.q ),
 
     // to register interface (read)
-    .qs     (ip_p_7_qs)
+    .qs     (prio7_qs)
   );
 
 
-  // F[p_8]: 8:8
+  // R[prio8]: V(False)
+
   prim_subreg #(
-    .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRO),
-    .RESVAL  (1'h0)
-  ) u_ip_p_8 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio8 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (1'b0),
-    .wd     ('0),
+    .we     (prio8_we),
+    .wd     (prio8_wd),
 
     // from internal hardware
-    .de     (hw2reg.ip[8].de),
-    .d      (hw2reg.ip[8].d),
+    .de     (1'b0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (),
+    .q      (reg2hw.prio8.q ),
 
     // to register interface (read)
-    .qs     (ip_p_8_qs)
+    .qs     (prio8_qs)
   );
 
 
-  // F[p_9]: 9:9
+  // R[prio9]: V(False)
+
   prim_subreg #(
-    .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRO),
-    .RESVAL  (1'h0)
-  ) u_ip_p_9 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio9 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (1'b0),
-    .wd     ('0),
+    .we     (prio9_we),
+    .wd     (prio9_wd),
 
     // from internal hardware
-    .de     (hw2reg.ip[9].de),
-    .d      (hw2reg.ip[9].d),
+    .de     (1'b0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (),
+    .q      (reg2hw.prio9.q ),
 
     // to register interface (read)
-    .qs     (ip_p_9_qs)
+    .qs     (prio9_qs)
   );
 
 
-  // F[p_10]: 10:10
+  // R[prio10]: V(False)
+
   prim_subreg #(
-    .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRO),
-    .RESVAL  (1'h0)
-  ) u_ip_p_10 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio10 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (1'b0),
-    .wd     ('0),
+    .we     (prio10_we),
+    .wd     (prio10_wd),
 
     // from internal hardware
-    .de     (hw2reg.ip[10].de),
-    .d      (hw2reg.ip[10].d),
+    .de     (1'b0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (),
+    .q      (reg2hw.prio10.q ),
 
     // to register interface (read)
-    .qs     (ip_p_10_qs)
+    .qs     (prio10_qs)
   );
 
 
-  // F[p_11]: 11:11
+  // R[prio11]: V(False)
+
   prim_subreg #(
-    .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRO),
-    .RESVAL  (1'h0)
-  ) u_ip_p_11 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio11 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (1'b0),
-    .wd     ('0),
+    .we     (prio11_we),
+    .wd     (prio11_wd),
 
     // from internal hardware
-    .de     (hw2reg.ip[11].de),
-    .d      (hw2reg.ip[11].d),
+    .de     (1'b0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (),
+    .q      (reg2hw.prio11.q ),
 
     // to register interface (read)
-    .qs     (ip_p_11_qs)
+    .qs     (prio11_qs)
   );
 
 
-  // F[p_12]: 12:12
+  // R[prio12]: V(False)
+
   prim_subreg #(
-    .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRO),
-    .RESVAL  (1'h0)
-  ) u_ip_p_12 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio12 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (1'b0),
-    .wd     ('0),
+    .we     (prio12_we),
+    .wd     (prio12_wd),
 
     // from internal hardware
-    .de     (hw2reg.ip[12].de),
-    .d      (hw2reg.ip[12].d),
+    .de     (1'b0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (),
+    .q      (reg2hw.prio12.q ),
 
     // to register interface (read)
-    .qs     (ip_p_12_qs)
+    .qs     (prio12_qs)
   );
 
 
-  // F[p_13]: 13:13
+  // R[prio13]: V(False)
+
   prim_subreg #(
-    .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRO),
-    .RESVAL  (1'h0)
-  ) u_ip_p_13 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio13 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (1'b0),
-    .wd     ('0),
+    .we     (prio13_we),
+    .wd     (prio13_wd),
 
     // from internal hardware
-    .de     (hw2reg.ip[13].de),
-    .d      (hw2reg.ip[13].d),
+    .de     (1'b0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (),
+    .q      (reg2hw.prio13.q ),
 
     // to register interface (read)
-    .qs     (ip_p_13_qs)
+    .qs     (prio13_qs)
   );
 
 
-  // F[p_14]: 14:14
+  // R[prio14]: V(False)
+
   prim_subreg #(
-    .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRO),
-    .RESVAL  (1'h0)
-  ) u_ip_p_14 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio14 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (1'b0),
-    .wd     ('0),
+    .we     (prio14_we),
+    .wd     (prio14_wd),
 
     // from internal hardware
-    .de     (hw2reg.ip[14].de),
-    .d      (hw2reg.ip[14].d),
+    .de     (1'b0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (),
+    .q      (reg2hw.prio14.q ),
 
     // to register interface (read)
-    .qs     (ip_p_14_qs)
+    .qs     (prio14_qs)
   );
 
 
-  // F[p_15]: 15:15
+  // R[prio15]: V(False)
+
   prim_subreg #(
-    .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRO),
-    .RESVAL  (1'h0)
-  ) u_ip_p_15 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio15 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (1'b0),
-    .wd     ('0),
+    .we     (prio15_we),
+    .wd     (prio15_wd),
 
     // from internal hardware
-    .de     (hw2reg.ip[15].de),
-    .d      (hw2reg.ip[15].d),
+    .de     (1'b0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (),
+    .q      (reg2hw.prio15.q ),
 
     // to register interface (read)
-    .qs     (ip_p_15_qs)
+    .qs     (prio15_qs)
   );
 
 
-  // F[p_16]: 16:16
+  // R[prio16]: V(False)
+
   prim_subreg #(
-    .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRO),
-    .RESVAL  (1'h0)
-  ) u_ip_p_16 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio16 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (1'b0),
-    .wd     ('0),
+    .we     (prio16_we),
+    .wd     (prio16_wd),
 
     // from internal hardware
-    .de     (hw2reg.ip[16].de),
-    .d      (hw2reg.ip[16].d),
+    .de     (1'b0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (),
+    .q      (reg2hw.prio16.q ),
 
     // to register interface (read)
-    .qs     (ip_p_16_qs)
+    .qs     (prio16_qs)
   );
 
 
-  // F[p_17]: 17:17
+  // R[prio17]: V(False)
+
   prim_subreg #(
-    .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRO),
-    .RESVAL  (1'h0)
-  ) u_ip_p_17 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio17 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (1'b0),
-    .wd     ('0),
+    .we     (prio17_we),
+    .wd     (prio17_wd),
 
     // from internal hardware
-    .de     (hw2reg.ip[17].de),
-    .d      (hw2reg.ip[17].d),
+    .de     (1'b0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (),
+    .q      (reg2hw.prio17.q ),
 
     // to register interface (read)
-    .qs     (ip_p_17_qs)
+    .qs     (prio17_qs)
   );
 
 
-  // F[p_18]: 18:18
+  // R[prio18]: V(False)
+
   prim_subreg #(
-    .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRO),
-    .RESVAL  (1'h0)
-  ) u_ip_p_18 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio18 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (1'b0),
-    .wd     ('0),
+    .we     (prio18_we),
+    .wd     (prio18_wd),
 
     // from internal hardware
-    .de     (hw2reg.ip[18].de),
-    .d      (hw2reg.ip[18].d),
+    .de     (1'b0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (),
+    .q      (reg2hw.prio18.q ),
 
     // to register interface (read)
-    .qs     (ip_p_18_qs)
+    .qs     (prio18_qs)
   );
 
 
-  // F[p_19]: 19:19
+  // R[prio19]: V(False)
+
   prim_subreg #(
-    .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRO),
-    .RESVAL  (1'h0)
-  ) u_ip_p_19 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio19 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (1'b0),
-    .wd     ('0),
+    .we     (prio19_we),
+    .wd     (prio19_wd),
 
     // from internal hardware
-    .de     (hw2reg.ip[19].de),
-    .d      (hw2reg.ip[19].d),
+    .de     (1'b0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (),
+    .q      (reg2hw.prio19.q ),
 
     // to register interface (read)
-    .qs     (ip_p_19_qs)
+    .qs     (prio19_qs)
   );
 
 
-  // F[p_20]: 20:20
+  // R[prio20]: V(False)
+
   prim_subreg #(
-    .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRO),
-    .RESVAL  (1'h0)
-  ) u_ip_p_20 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio20 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (1'b0),
-    .wd     ('0),
+    .we     (prio20_we),
+    .wd     (prio20_wd),
 
     // from internal hardware
-    .de     (hw2reg.ip[20].de),
-    .d      (hw2reg.ip[20].d),
+    .de     (1'b0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (),
+    .q      (reg2hw.prio20.q ),
 
     // to register interface (read)
-    .qs     (ip_p_20_qs)
+    .qs     (prio20_qs)
   );
 
 
-  // F[p_21]: 21:21
+  // R[prio21]: V(False)
+
   prim_subreg #(
-    .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRO),
-    .RESVAL  (1'h0)
-  ) u_ip_p_21 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio21 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (1'b0),
-    .wd     ('0),
+    .we     (prio21_we),
+    .wd     (prio21_wd),
 
     // from internal hardware
-    .de     (hw2reg.ip[21].de),
-    .d      (hw2reg.ip[21].d),
+    .de     (1'b0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (),
+    .q      (reg2hw.prio21.q ),
 
     // to register interface (read)
-    .qs     (ip_p_21_qs)
+    .qs     (prio21_qs)
   );
 
 
-  // F[p_22]: 22:22
+  // R[prio22]: V(False)
+
   prim_subreg #(
-    .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRO),
-    .RESVAL  (1'h0)
-  ) u_ip_p_22 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio22 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (1'b0),
-    .wd     ('0),
+    .we     (prio22_we),
+    .wd     (prio22_wd),
 
     // from internal hardware
-    .de     (hw2reg.ip[22].de),
-    .d      (hw2reg.ip[22].d),
+    .de     (1'b0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (),
+    .q      (reg2hw.prio22.q ),
 
     // to register interface (read)
-    .qs     (ip_p_22_qs)
+    .qs     (prio22_qs)
   );
 
 
-  // F[p_23]: 23:23
+  // R[prio23]: V(False)
+
   prim_subreg #(
-    .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRO),
-    .RESVAL  (1'h0)
-  ) u_ip_p_23 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio23 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (1'b0),
-    .wd     ('0),
+    .we     (prio23_we),
+    .wd     (prio23_wd),
 
     // from internal hardware
-    .de     (hw2reg.ip[23].de),
-    .d      (hw2reg.ip[23].d),
+    .de     (1'b0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (),
+    .q      (reg2hw.prio23.q ),
 
     // to register interface (read)
-    .qs     (ip_p_23_qs)
+    .qs     (prio23_qs)
   );
 
 
-  // F[p_24]: 24:24
+  // R[prio24]: V(False)
+
   prim_subreg #(
-    .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRO),
-    .RESVAL  (1'h0)
-  ) u_ip_p_24 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio24 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (1'b0),
-    .wd     ('0),
+    .we     (prio24_we),
+    .wd     (prio24_wd),
 
     // from internal hardware
-    .de     (hw2reg.ip[24].de),
-    .d      (hw2reg.ip[24].d),
+    .de     (1'b0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (),
+    .q      (reg2hw.prio24.q ),
 
     // to register interface (read)
-    .qs     (ip_p_24_qs)
+    .qs     (prio24_qs)
   );
 
 
-  // F[p_25]: 25:25
+  // R[prio25]: V(False)
+
   prim_subreg #(
-    .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRO),
-    .RESVAL  (1'h0)
-  ) u_ip_p_25 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio25 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (1'b0),
-    .wd     ('0),
+    .we     (prio25_we),
+    .wd     (prio25_wd),
 
     // from internal hardware
-    .de     (hw2reg.ip[25].de),
-    .d      (hw2reg.ip[25].d),
+    .de     (1'b0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (),
+    .q      (reg2hw.prio25.q ),
 
     // to register interface (read)
-    .qs     (ip_p_25_qs)
+    .qs     (prio25_qs)
   );
 
 
-  // F[p_26]: 26:26
+  // R[prio26]: V(False)
+
   prim_subreg #(
-    .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRO),
-    .RESVAL  (1'h0)
-  ) u_ip_p_26 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio26 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (1'b0),
-    .wd     ('0),
+    .we     (prio26_we),
+    .wd     (prio26_wd),
 
     // from internal hardware
-    .de     (hw2reg.ip[26].de),
-    .d      (hw2reg.ip[26].d),
+    .de     (1'b0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (),
+    .q      (reg2hw.prio26.q ),
 
     // to register interface (read)
-    .qs     (ip_p_26_qs)
+    .qs     (prio26_qs)
   );
 
 
-  // F[p_27]: 27:27
+  // R[prio27]: V(False)
+
   prim_subreg #(
-    .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRO),
-    .RESVAL  (1'h0)
-  ) u_ip_p_27 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio27 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (1'b0),
-    .wd     ('0),
+    .we     (prio27_we),
+    .wd     (prio27_wd),
 
     // from internal hardware
-    .de     (hw2reg.ip[27].de),
-    .d      (hw2reg.ip[27].d),
+    .de     (1'b0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (),
+    .q      (reg2hw.prio27.q ),
 
     // to register interface (read)
-    .qs     (ip_p_27_qs)
+    .qs     (prio27_qs)
   );
 
 
-  // F[p_28]: 28:28
+  // R[prio28]: V(False)
+
   prim_subreg #(
-    .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRO),
-    .RESVAL  (1'h0)
-  ) u_ip_p_28 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio28 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (1'b0),
-    .wd     ('0),
+    .we     (prio28_we),
+    .wd     (prio28_wd),
 
     // from internal hardware
-    .de     (hw2reg.ip[28].de),
-    .d      (hw2reg.ip[28].d),
+    .de     (1'b0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (),
+    .q      (reg2hw.prio28.q ),
 
     // to register interface (read)
-    .qs     (ip_p_28_qs)
+    .qs     (prio28_qs)
   );
 
 
-  // F[p_29]: 29:29
+  // R[prio29]: V(False)
+
   prim_subreg #(
-    .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRO),
-    .RESVAL  (1'h0)
-  ) u_ip_p_29 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio29 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (1'b0),
-    .wd     ('0),
+    .we     (prio29_we),
+    .wd     (prio29_wd),
 
     // from internal hardware
-    .de     (hw2reg.ip[29].de),
-    .d      (hw2reg.ip[29].d),
+    .de     (1'b0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (),
+    .q      (reg2hw.prio29.q ),
 
     // to register interface (read)
-    .qs     (ip_p_29_qs)
+    .qs     (prio29_qs)
   );
 
 
-  // F[p_30]: 30:30
+  // R[prio30]: V(False)
+
   prim_subreg #(
-    .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRO),
-    .RESVAL  (1'h0)
-  ) u_ip_p_30 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio30 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (1'b0),
-    .wd     ('0),
+    .we     (prio30_we),
+    .wd     (prio30_wd),
 
     // from internal hardware
-    .de     (hw2reg.ip[30].de),
-    .d      (hw2reg.ip[30].d),
+    .de     (1'b0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (),
+    .q      (reg2hw.prio30.q ),
 
     // to register interface (read)
-    .qs     (ip_p_30_qs)
+    .qs     (prio30_qs)
   );
 
 
-  // F[p_31]: 31:31
+  // R[prio31]: V(False)
+
   prim_subreg #(
-    .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRO),
-    .RESVAL  (1'h0)
-  ) u_ip_p_31 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .DW      (3),
+    .SWACCESS("RW"),
+    .RESVAL  (3'h0)
+  ) u_prio31 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (1'b0),
-    .wd     ('0),
+    .we     (prio31_we),
+    .wd     (prio31_wd),
 
     // from internal hardware
-    .de     (hw2reg.ip[31].de),
-    .d      (hw2reg.ip[31].d),
+    .de     (1'b0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (),
+    .q      (reg2hw.prio31.q ),
 
     // to register interface (read)
-    .qs     (ip_p_31_qs)
+    .qs     (prio31_qs)
   );
 
 
 
+  // Subregister 0 of Multireg ip
+  // R[ip]: V(False)
 
-  // Subregister 0 of Multireg le
-  // R[le]: V(False)
-
-  // F[le_0]: 0:0
+  // F[p_0]: 0:0
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_le_le_0 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+  ) u_ip_p_0 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
-    // from register interface
-    .we     (le_we),
-    .wd     (le_le_0_wd),
+    .we     (1'b0),
+    .wd     ('0  ),
 
     // from internal hardware
-    .de     (1'b0),
-    .d      ('0),
+    .de     (hw2reg.ip[0].de),
+    .d      (hw2reg.ip[0].d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.le[0].q),
+    .q      (),
 
     // to register interface (read)
-    .qs     (le_le_0_qs)
+    .qs     (ip_p_0_qs)
   );
 
 
-  // F[le_1]: 1:1
+  // F[p_1]: 1:1
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_le_le_1 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+  ) u_ip_p_1 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
-    // from register interface
-    .we     (le_we),
-    .wd     (le_le_1_wd),
+    .we     (1'b0),
+    .wd     ('0  ),
 
     // from internal hardware
-    .de     (1'b0),
-    .d      ('0),
+    .de     (hw2reg.ip[1].de),
+    .d      (hw2reg.ip[1].d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.le[1].q),
+    .q      (),
 
     // to register interface (read)
-    .qs     (le_le_1_qs)
+    .qs     (ip_p_1_qs)
   );
 
 
-  // F[le_2]: 2:2
+  // F[p_2]: 2:2
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_le_le_2 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+  ) u_ip_p_2 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
-    // from register interface
-    .we     (le_we),
-    .wd     (le_le_2_wd),
+    .we     (1'b0),
+    .wd     ('0  ),
 
     // from internal hardware
-    .de     (1'b0),
-    .d      ('0),
+    .de     (hw2reg.ip[2].de),
+    .d      (hw2reg.ip[2].d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.le[2].q),
+    .q      (),
 
     // to register interface (read)
-    .qs     (le_le_2_qs)
+    .qs     (ip_p_2_qs)
   );
 
 
-  // F[le_3]: 3:3
+  // F[p_3]: 3:3
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_le_le_3 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+  ) u_ip_p_3 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
-    // from register interface
-    .we     (le_we),
-    .wd     (le_le_3_wd),
+    .we     (1'b0),
+    .wd     ('0  ),
 
     // from internal hardware
-    .de     (1'b0),
-    .d      ('0),
+    .de     (hw2reg.ip[3].de),
+    .d      (hw2reg.ip[3].d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.le[3].q),
+    .q      (),
 
     // to register interface (read)
-    .qs     (le_le_3_qs)
+    .qs     (ip_p_3_qs)
   );
 
 
-  // F[le_4]: 4:4
+  // F[p_4]: 4:4
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_le_le_4 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+  ) u_ip_p_4 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
-    // from register interface
-    .we     (le_we),
-    .wd     (le_le_4_wd),
+    .we     (1'b0),
+    .wd     ('0  ),
 
     // from internal hardware
-    .de     (1'b0),
-    .d      ('0),
+    .de     (hw2reg.ip[4].de),
+    .d      (hw2reg.ip[4].d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.le[4].q),
+    .q      (),
 
     // to register interface (read)
-    .qs     (le_le_4_qs)
+    .qs     (ip_p_4_qs)
   );
 
 
-  // F[le_5]: 5:5
+  // F[p_5]: 5:5
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_le_le_5 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+  ) u_ip_p_5 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
-    // from register interface
-    .we     (le_we),
-    .wd     (le_le_5_wd),
+    .we     (1'b0),
+    .wd     ('0  ),
 
     // from internal hardware
-    .de     (1'b0),
-    .d      ('0),
+    .de     (hw2reg.ip[5].de),
+    .d      (hw2reg.ip[5].d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.le[5].q),
+    .q      (),
 
     // to register interface (read)
-    .qs     (le_le_5_qs)
+    .qs     (ip_p_5_qs)
   );
 
 
-  // F[le_6]: 6:6
+  // F[p_6]: 6:6
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_le_le_6 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+  ) u_ip_p_6 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
-    // from register interface
-    .we     (le_we),
-    .wd     (le_le_6_wd),
+    .we     (1'b0),
+    .wd     ('0  ),
 
     // from internal hardware
-    .de     (1'b0),
-    .d      ('0),
+    .de     (hw2reg.ip[6].de),
+    .d      (hw2reg.ip[6].d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.le[6].q),
+    .q      (),
 
     // to register interface (read)
-    .qs     (le_le_6_qs)
+    .qs     (ip_p_6_qs)
   );
 
 
-  // F[le_7]: 7:7
+  // F[p_7]: 7:7
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_le_le_7 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+  ) u_ip_p_7 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
-    // from register interface
-    .we     (le_we),
-    .wd     (le_le_7_wd),
+    .we     (1'b0),
+    .wd     ('0  ),
 
     // from internal hardware
-    .de     (1'b0),
-    .d      ('0),
+    .de     (hw2reg.ip[7].de),
+    .d      (hw2reg.ip[7].d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.le[7].q),
+    .q      (),
 
     // to register interface (read)
-    .qs     (le_le_7_qs)
+    .qs     (ip_p_7_qs)
   );
 
 
-  // F[le_8]: 8:8
+  // F[p_8]: 8:8
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_le_le_8 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+  ) u_ip_p_8 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
-    // from register interface
-    .we     (le_we),
-    .wd     (le_le_8_wd),
+    .we     (1'b0),
+    .wd     ('0  ),
 
     // from internal hardware
-    .de     (1'b0),
-    .d      ('0),
+    .de     (hw2reg.ip[8].de),
+    .d      (hw2reg.ip[8].d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.le[8].q),
+    .q      (),
 
     // to register interface (read)
-    .qs     (le_le_8_qs)
+    .qs     (ip_p_8_qs)
   );
 
 
-  // F[le_9]: 9:9
+  // F[p_9]: 9:9
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_le_le_9 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+  ) u_ip_p_9 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
-    // from register interface
-    .we     (le_we),
-    .wd     (le_le_9_wd),
+    .we     (1'b0),
+    .wd     ('0  ),
 
     // from internal hardware
-    .de     (1'b0),
-    .d      ('0),
+    .de     (hw2reg.ip[9].de),
+    .d      (hw2reg.ip[9].d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.le[9].q),
+    .q      (),
 
     // to register interface (read)
-    .qs     (le_le_9_qs)
+    .qs     (ip_p_9_qs)
   );
 
 
-  // F[le_10]: 10:10
+  // F[p_10]: 10:10
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_le_le_10 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+  ) u_ip_p_10 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
-    // from register interface
-    .we     (le_we),
-    .wd     (le_le_10_wd),
+    .we     (1'b0),
+    .wd     ('0  ),
 
     // from internal hardware
-    .de     (1'b0),
-    .d      ('0),
+    .de     (hw2reg.ip[10].de),
+    .d      (hw2reg.ip[10].d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.le[10].q),
+    .q      (),
 
     // to register interface (read)
-    .qs     (le_le_10_qs)
+    .qs     (ip_p_10_qs)
   );
 
 
-  // F[le_11]: 11:11
+  // F[p_11]: 11:11
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_le_le_11 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+  ) u_ip_p_11 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
-    // from register interface
-    .we     (le_we),
-    .wd     (le_le_11_wd),
+    .we     (1'b0),
+    .wd     ('0  ),
 
     // from internal hardware
-    .de     (1'b0),
-    .d      ('0),
+    .de     (hw2reg.ip[11].de),
+    .d      (hw2reg.ip[11].d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.le[11].q),
+    .q      (),
 
     // to register interface (read)
-    .qs     (le_le_11_qs)
+    .qs     (ip_p_11_qs)
   );
 
 
-  // F[le_12]: 12:12
+  // F[p_12]: 12:12
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_le_le_12 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+  ) u_ip_p_12 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
-    // from register interface
-    .we     (le_we),
-    .wd     (le_le_12_wd),
+    .we     (1'b0),
+    .wd     ('0  ),
 
     // from internal hardware
-    .de     (1'b0),
-    .d      ('0),
+    .de     (hw2reg.ip[12].de),
+    .d      (hw2reg.ip[12].d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.le[12].q),
+    .q      (),
 
     // to register interface (read)
-    .qs     (le_le_12_qs)
+    .qs     (ip_p_12_qs)
   );
 
 
-  // F[le_13]: 13:13
+  // F[p_13]: 13:13
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_le_le_13 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+  ) u_ip_p_13 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
-    // from register interface
-    .we     (le_we),
-    .wd     (le_le_13_wd),
+    .we     (1'b0),
+    .wd     ('0  ),
 
     // from internal hardware
-    .de     (1'b0),
-    .d      ('0),
+    .de     (hw2reg.ip[13].de),
+    .d      (hw2reg.ip[13].d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.le[13].q),
+    .q      (),
 
     // to register interface (read)
-    .qs     (le_le_13_qs)
+    .qs     (ip_p_13_qs)
   );
 
 
-  // F[le_14]: 14:14
+  // F[p_14]: 14:14
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_le_le_14 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+  ) u_ip_p_14 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
-    // from register interface
-    .we     (le_we),
-    .wd     (le_le_14_wd),
+    .we     (1'b0),
+    .wd     ('0  ),
 
     // from internal hardware
-    .de     (1'b0),
-    .d      ('0),
+    .de     (hw2reg.ip[14].de),
+    .d      (hw2reg.ip[14].d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.le[14].q),
+    .q      (),
 
     // to register interface (read)
-    .qs     (le_le_14_qs)
+    .qs     (ip_p_14_qs)
   );
 
 
-  // F[le_15]: 15:15
+  // F[p_15]: 15:15
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_le_le_15 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+  ) u_ip_p_15 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
-    // from register interface
-    .we     (le_we),
-    .wd     (le_le_15_wd),
+    .we     (1'b0),
+    .wd     ('0  ),
 
     // from internal hardware
-    .de     (1'b0),
-    .d      ('0),
+    .de     (hw2reg.ip[15].de),
+    .d      (hw2reg.ip[15].d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.le[15].q),
+    .q      (),
 
     // to register interface (read)
-    .qs     (le_le_15_qs)
+    .qs     (ip_p_15_qs)
   );
 
 
-  // F[le_16]: 16:16
+  // F[p_16]: 16:16
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_le_le_16 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+  ) u_ip_p_16 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
-    // from register interface
-    .we     (le_we),
-    .wd     (le_le_16_wd),
+    .we     (1'b0),
+    .wd     ('0  ),
 
     // from internal hardware
-    .de     (1'b0),
-    .d      ('0),
+    .de     (hw2reg.ip[16].de),
+    .d      (hw2reg.ip[16].d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.le[16].q),
+    .q      (),
 
     // to register interface (read)
-    .qs     (le_le_16_qs)
+    .qs     (ip_p_16_qs)
   );
 
 
-  // F[le_17]: 17:17
+  // F[p_17]: 17:17
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_le_le_17 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+  ) u_ip_p_17 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
-    // from register interface
-    .we     (le_we),
-    .wd     (le_le_17_wd),
+    .we     (1'b0),
+    .wd     ('0  ),
 
     // from internal hardware
-    .de     (1'b0),
-    .d      ('0),
+    .de     (hw2reg.ip[17].de),
+    .d      (hw2reg.ip[17].d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.le[17].q),
+    .q      (),
 
     // to register interface (read)
-    .qs     (le_le_17_qs)
+    .qs     (ip_p_17_qs)
   );
 
 
-  // F[le_18]: 18:18
+  // F[p_18]: 18:18
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_le_le_18 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+  ) u_ip_p_18 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
-    // from register interface
-    .we     (le_we),
-    .wd     (le_le_18_wd),
+    .we     (1'b0),
+    .wd     ('0  ),
 
     // from internal hardware
-    .de     (1'b0),
-    .d      ('0),
+    .de     (hw2reg.ip[18].de),
+    .d      (hw2reg.ip[18].d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.le[18].q),
+    .q      (),
 
     // to register interface (read)
-    .qs     (le_le_18_qs)
+    .qs     (ip_p_18_qs)
   );
 
 
-  // F[le_19]: 19:19
+  // F[p_19]: 19:19
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_le_le_19 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+  ) u_ip_p_19 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
-    // from register interface
-    .we     (le_we),
-    .wd     (le_le_19_wd),
+    .we     (1'b0),
+    .wd     ('0  ),
 
     // from internal hardware
-    .de     (1'b0),
-    .d      ('0),
+    .de     (hw2reg.ip[19].de),
+    .d      (hw2reg.ip[19].d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.le[19].q),
+    .q      (),
 
     // to register interface (read)
-    .qs     (le_le_19_qs)
+    .qs     (ip_p_19_qs)
   );
 
 
-  // F[le_20]: 20:20
+  // F[p_20]: 20:20
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_le_le_20 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+  ) u_ip_p_20 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
-    // from register interface
-    .we     (le_we),
-    .wd     (le_le_20_wd),
+    .we     (1'b0),
+    .wd     ('0  ),
 
     // from internal hardware
-    .de     (1'b0),
-    .d      ('0),
+    .de     (hw2reg.ip[20].de),
+    .d      (hw2reg.ip[20].d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.le[20].q),
+    .q      (),
 
     // to register interface (read)
-    .qs     (le_le_20_qs)
+    .qs     (ip_p_20_qs)
   );
 
 
-  // F[le_21]: 21:21
+  // F[p_21]: 21:21
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_le_le_21 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+  ) u_ip_p_21 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
-    // from register interface
-    .we     (le_we),
-    .wd     (le_le_21_wd),
+    .we     (1'b0),
+    .wd     ('0  ),
 
     // from internal hardware
-    .de     (1'b0),
-    .d      ('0),
+    .de     (hw2reg.ip[21].de),
+    .d      (hw2reg.ip[21].d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.le[21].q),
+    .q      (),
 
     // to register interface (read)
-    .qs     (le_le_21_qs)
+    .qs     (ip_p_21_qs)
   );
 
 
-  // F[le_22]: 22:22
+  // F[p_22]: 22:22
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_le_le_22 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+  ) u_ip_p_22 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
-    // from register interface
-    .we     (le_we),
-    .wd     (le_le_22_wd),
+    .we     (1'b0),
+    .wd     ('0  ),
 
     // from internal hardware
-    .de     (1'b0),
-    .d      ('0),
+    .de     (hw2reg.ip[22].de),
+    .d      (hw2reg.ip[22].d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.le[22].q),
+    .q      (),
 
     // to register interface (read)
-    .qs     (le_le_22_qs)
+    .qs     (ip_p_22_qs)
   );
 
 
-  // F[le_23]: 23:23
+  // F[p_23]: 23:23
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_le_le_23 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+  ) u_ip_p_23 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
-    // from register interface
-    .we     (le_we),
-    .wd     (le_le_23_wd),
+    .we     (1'b0),
+    .wd     ('0  ),
 
     // from internal hardware
-    .de     (1'b0),
-    .d      ('0),
+    .de     (hw2reg.ip[23].de),
+    .d      (hw2reg.ip[23].d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.le[23].q),
+    .q      (),
 
     // to register interface (read)
-    .qs     (le_le_23_qs)
+    .qs     (ip_p_23_qs)
   );
 
 
-  // F[le_24]: 24:24
+  // F[p_24]: 24:24
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_le_le_24 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+  ) u_ip_p_24 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
-    // from register interface
-    .we     (le_we),
-    .wd     (le_le_24_wd),
+    .we     (1'b0),
+    .wd     ('0  ),
 
     // from internal hardware
-    .de     (1'b0),
-    .d      ('0),
+    .de     (hw2reg.ip[24].de),
+    .d      (hw2reg.ip[24].d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.le[24].q),
+    .q      (),
 
     // to register interface (read)
-    .qs     (le_le_24_qs)
+    .qs     (ip_p_24_qs)
   );
 
 
-  // F[le_25]: 25:25
+  // F[p_25]: 25:25
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_le_le_25 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+  ) u_ip_p_25 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
-    // from register interface
-    .we     (le_we),
-    .wd     (le_le_25_wd),
+    .we     (1'b0),
+    .wd     ('0  ),
 
     // from internal hardware
-    .de     (1'b0),
-    .d      ('0),
+    .de     (hw2reg.ip[25].de),
+    .d      (hw2reg.ip[25].d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.le[25].q),
+    .q      (),
 
     // to register interface (read)
-    .qs     (le_le_25_qs)
+    .qs     (ip_p_25_qs)
   );
 
 
-  // F[le_26]: 26:26
+  // F[p_26]: 26:26
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_le_le_26 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+  ) u_ip_p_26 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
-    // from register interface
-    .we     (le_we),
-    .wd     (le_le_26_wd),
+    .we     (1'b0),
+    .wd     ('0  ),
 
     // from internal hardware
-    .de     (1'b0),
-    .d      ('0),
+    .de     (hw2reg.ip[26].de),
+    .d      (hw2reg.ip[26].d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.le[26].q),
+    .q      (),
 
     // to register interface (read)
-    .qs     (le_le_26_qs)
+    .qs     (ip_p_26_qs)
   );
 
 
-  // F[le_27]: 27:27
+  // F[p_27]: 27:27
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_le_le_27 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+  ) u_ip_p_27 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
-    // from register interface
-    .we     (le_we),
-    .wd     (le_le_27_wd),
+    .we     (1'b0),
+    .wd     ('0  ),
 
     // from internal hardware
-    .de     (1'b0),
-    .d      ('0),
+    .de     (hw2reg.ip[27].de),
+    .d      (hw2reg.ip[27].d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.le[27].q),
+    .q      (),
 
     // to register interface (read)
-    .qs     (le_le_27_qs)
+    .qs     (ip_p_27_qs)
   );
 
 
-  // F[le_28]: 28:28
+  // F[p_28]: 28:28
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_le_le_28 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+  ) u_ip_p_28 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
-    // from register interface
-    .we     (le_we),
-    .wd     (le_le_28_wd),
+    .we     (1'b0),
+    .wd     ('0  ),
 
     // from internal hardware
-    .de     (1'b0),
-    .d      ('0),
+    .de     (hw2reg.ip[28].de),
+    .d      (hw2reg.ip[28].d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.le[28].q),
+    .q      (),
 
     // to register interface (read)
-    .qs     (le_le_28_qs)
+    .qs     (ip_p_28_qs)
   );
 
 
-  // F[le_29]: 29:29
+  // F[p_29]: 29:29
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_le_le_29 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+  ) u_ip_p_29 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
-    // from register interface
-    .we     (le_we),
-    .wd     (le_le_29_wd),
+    .we     (1'b0),
+    .wd     ('0  ),
 
     // from internal hardware
-    .de     (1'b0),
-    .d      ('0),
+    .de     (hw2reg.ip[29].de),
+    .d      (hw2reg.ip[29].d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.le[29].q),
+    .q      (),
 
     // to register interface (read)
-    .qs     (le_le_29_qs)
+    .qs     (ip_p_29_qs)
   );
 
 
-  // F[le_30]: 30:30
+  // F[p_30]: 30:30
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_le_le_30 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+  ) u_ip_p_30 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
-    // from register interface
-    .we     (le_we),
-    .wd     (le_le_30_wd),
+    .we     (1'b0),
+    .wd     ('0  ),
 
     // from internal hardware
-    .de     (1'b0),
-    .d      ('0),
+    .de     (hw2reg.ip[30].de),
+    .d      (hw2reg.ip[30].d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.le[30].q),
+    .q      (),
 
     // to register interface (read)
-    .qs     (le_le_30_qs)
+    .qs     (ip_p_30_qs)
   );
 
 
-  // F[le_31]: 31:31
+  // F[p_31]: 31:31
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RO"),
     .RESVAL  (1'h0)
-  ) u_le_le_31 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+  ) u_ip_p_31 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
-    // from register interface
-    .we     (le_we),
-    .wd     (le_le_31_wd),
+    .we     (1'b0),
+    .wd     ('0  ),
 
     // from internal hardware
-    .de     (1'b0),
-    .d      ('0),
+    .de     (hw2reg.ip[31].de),
+    .d      (hw2reg.ip[31].d ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.le[31].q),
+    .q      (),
 
     // to register interface (read)
-    .qs     (le_le_31_qs)
+    .qs     (ip_p_31_qs)
   );
 
 
 
-  // R[prio0]: V(False)
 
+  // Subregister 0 of Multireg le
+  // R[le]: V(False)
+
+  // F[le_0]: 0:0
   prim_subreg #(
-    .DW      (3),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
-    .RESVAL  (3'h0)
-  ) u_prio0 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_le_0 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (prio0_we),
-    .wd     (prio0_wd),
+    .we     (le_le_0_we),
+    .wd     (le_le_0_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.prio0.q),
+    .q      (reg2hw.le[0].q ),
 
     // to register interface (read)
-    .qs     (prio0_qs)
+    .qs     (le_le_0_qs)
   );
 
 
-  // R[prio1]: V(False)
-
+  // F[le_1]: 1:1
   prim_subreg #(
-    .DW      (3),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
-    .RESVAL  (3'h0)
-  ) u_prio1 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_le_1 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (prio1_we),
-    .wd     (prio1_wd),
+    .we     (le_le_1_we),
+    .wd     (le_le_1_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.prio1.q),
+    .q      (reg2hw.le[1].q ),
 
     // to register interface (read)
-    .qs     (prio1_qs)
+    .qs     (le_le_1_qs)
   );
 
 
-  // R[prio2]: V(False)
-
+  // F[le_2]: 2:2
   prim_subreg #(
-    .DW      (3),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
-    .RESVAL  (3'h0)
-  ) u_prio2 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_le_2 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (prio2_we),
-    .wd     (prio2_wd),
+    .we     (le_le_2_we),
+    .wd     (le_le_2_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.prio2.q),
+    .q      (reg2hw.le[2].q ),
 
     // to register interface (read)
-    .qs     (prio2_qs)
+    .qs     (le_le_2_qs)
   );
 
 
-  // R[prio3]: V(False)
-
+  // F[le_3]: 3:3
   prim_subreg #(
-    .DW      (3),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
-    .RESVAL  (3'h0)
-  ) u_prio3 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_le_3 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (prio3_we),
-    .wd     (prio3_wd),
+    .we     (le_le_3_we),
+    .wd     (le_le_3_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.prio3.q),
+    .q      (reg2hw.le[3].q ),
 
     // to register interface (read)
-    .qs     (prio3_qs)
+    .qs     (le_le_3_qs)
   );
 
 
-  // R[prio4]: V(False)
-
+  // F[le_4]: 4:4
   prim_subreg #(
-    .DW      (3),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
-    .RESVAL  (3'h0)
-  ) u_prio4 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_le_4 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (prio4_we),
-    .wd     (prio4_wd),
+    .we     (le_le_4_we),
+    .wd     (le_le_4_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.prio4.q),
+    .q      (reg2hw.le[4].q ),
 
     // to register interface (read)
-    .qs     (prio4_qs)
+    .qs     (le_le_4_qs)
   );
 
 
-  // R[prio5]: V(False)
-
+  // F[le_5]: 5:5
   prim_subreg #(
-    .DW      (3),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
-    .RESVAL  (3'h0)
-  ) u_prio5 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_le_5 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (prio5_we),
-    .wd     (prio5_wd),
+    .we     (le_le_5_we),
+    .wd     (le_le_5_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.prio5.q),
+    .q      (reg2hw.le[5].q ),
 
     // to register interface (read)
-    .qs     (prio5_qs)
+    .qs     (le_le_5_qs)
   );
 
 
-  // R[prio6]: V(False)
-
+  // F[le_6]: 6:6
   prim_subreg #(
-    .DW      (3),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
-    .RESVAL  (3'h0)
-  ) u_prio6 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_le_6 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (prio6_we),
-    .wd     (prio6_wd),
+    .we     (le_le_6_we),
+    .wd     (le_le_6_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.prio6.q),
+    .q      (reg2hw.le[6].q ),
 
     // to register interface (read)
-    .qs     (prio6_qs)
+    .qs     (le_le_6_qs)
   );
 
 
-  // R[prio7]: V(False)
-
+  // F[le_7]: 7:7
   prim_subreg #(
-    .DW      (3),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
-    .RESVAL  (3'h0)
-  ) u_prio7 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_le_7 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (prio7_we),
-    .wd     (prio7_wd),
+    .we     (le_le_7_we),
+    .wd     (le_le_7_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.prio7.q),
+    .q      (reg2hw.le[7].q ),
 
     // to register interface (read)
-    .qs     (prio7_qs)
+    .qs     (le_le_7_qs)
   );
 
 
-  // R[prio8]: V(False)
-
+  // F[le_8]: 8:8
   prim_subreg #(
-    .DW      (3),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
-    .RESVAL  (3'h0)
-  ) u_prio8 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_le_8 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (prio8_we),
-    .wd     (prio8_wd),
+    .we     (le_le_8_we),
+    .wd     (le_le_8_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.prio8.q),
+    .q      (reg2hw.le[8].q ),
 
     // to register interface (read)
-    .qs     (prio8_qs)
+    .qs     (le_le_8_qs)
   );
 
 
-  // R[prio9]: V(False)
-
+  // F[le_9]: 9:9
   prim_subreg #(
-    .DW      (3),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
-    .RESVAL  (3'h0)
-  ) u_prio9 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_le_9 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (prio9_we),
-    .wd     (prio9_wd),
+    .we     (le_le_9_we),
+    .wd     (le_le_9_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.prio9.q),
+    .q      (reg2hw.le[9].q ),
 
     // to register interface (read)
-    .qs     (prio9_qs)
+    .qs     (le_le_9_qs)
   );
 
 
-  // R[prio10]: V(False)
-
+  // F[le_10]: 10:10
   prim_subreg #(
-    .DW      (3),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
-    .RESVAL  (3'h0)
-  ) u_prio10 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_le_10 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (prio10_we),
-    .wd     (prio10_wd),
+    .we     (le_le_10_we),
+    .wd     (le_le_10_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.prio10.q),
+    .q      (reg2hw.le[10].q ),
 
     // to register interface (read)
-    .qs     (prio10_qs)
+    .qs     (le_le_10_qs)
   );
 
 
-  // R[prio11]: V(False)
-
+  // F[le_11]: 11:11
   prim_subreg #(
-    .DW      (3),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
-    .RESVAL  (3'h0)
-  ) u_prio11 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_le_11 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (prio11_we),
-    .wd     (prio11_wd),
+    .we     (le_le_11_we),
+    .wd     (le_le_11_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.prio11.q),
+    .q      (reg2hw.le[11].q ),
 
     // to register interface (read)
-    .qs     (prio11_qs)
+    .qs     (le_le_11_qs)
   );
 
 
-  // R[prio12]: V(False)
-
+  // F[le_12]: 12:12
   prim_subreg #(
-    .DW      (3),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
-    .RESVAL  (3'h0)
-  ) u_prio12 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_le_12 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (prio12_we),
-    .wd     (prio12_wd),
+    .we     (le_le_12_we),
+    .wd     (le_le_12_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.prio12.q),
+    .q      (reg2hw.le[12].q ),
 
     // to register interface (read)
-    .qs     (prio12_qs)
+    .qs     (le_le_12_qs)
   );
 
 
-  // R[prio13]: V(False)
-
+  // F[le_13]: 13:13
   prim_subreg #(
-    .DW      (3),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
-    .RESVAL  (3'h0)
-  ) u_prio13 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_le_13 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (prio13_we),
-    .wd     (prio13_wd),
+    .we     (le_le_13_we),
+    .wd     (le_le_13_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.prio13.q),
+    .q      (reg2hw.le[13].q ),
 
     // to register interface (read)
-    .qs     (prio13_qs)
+    .qs     (le_le_13_qs)
   );
 
 
-  // R[prio14]: V(False)
-
+  // F[le_14]: 14:14
   prim_subreg #(
-    .DW      (3),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
-    .RESVAL  (3'h0)
-  ) u_prio14 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_le_14 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (prio14_we),
-    .wd     (prio14_wd),
+    .we     (le_le_14_we),
+    .wd     (le_le_14_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.prio14.q),
+    .q      (reg2hw.le[14].q ),
 
     // to register interface (read)
-    .qs     (prio14_qs)
+    .qs     (le_le_14_qs)
   );
 
 
-  // R[prio15]: V(False)
-
+  // F[le_15]: 15:15
   prim_subreg #(
-    .DW      (3),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
-    .RESVAL  (3'h0)
-  ) u_prio15 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_le_15 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (prio15_we),
-    .wd     (prio15_wd),
+    .we     (le_le_15_we),
+    .wd     (le_le_15_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.prio15.q),
+    .q      (reg2hw.le[15].q ),
 
     // to register interface (read)
-    .qs     (prio15_qs)
+    .qs     (le_le_15_qs)
   );
 
 
-  // R[prio16]: V(False)
-
+  // F[le_16]: 16:16
   prim_subreg #(
-    .DW      (3),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
-    .RESVAL  (3'h0)
-  ) u_prio16 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_le_16 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (prio16_we),
-    .wd     (prio16_wd),
+    .we     (le_le_16_we),
+    .wd     (le_le_16_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.prio16.q),
+    .q      (reg2hw.le[16].q ),
 
     // to register interface (read)
-    .qs     (prio16_qs)
+    .qs     (le_le_16_qs)
   );
 
 
-  // R[prio17]: V(False)
-
+  // F[le_17]: 17:17
   prim_subreg #(
-    .DW      (3),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
-    .RESVAL  (3'h0)
-  ) u_prio17 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_le_17 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (prio17_we),
-    .wd     (prio17_wd),
+    .we     (le_le_17_we),
+    .wd     (le_le_17_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.prio17.q),
+    .q      (reg2hw.le[17].q ),
 
     // to register interface (read)
-    .qs     (prio17_qs)
+    .qs     (le_le_17_qs)
   );
 
 
-  // R[prio18]: V(False)
-
+  // F[le_18]: 18:18
   prim_subreg #(
-    .DW      (3),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
-    .RESVAL  (3'h0)
-  ) u_prio18 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_le_18 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (prio18_we),
-    .wd     (prio18_wd),
+    .we     (le_le_18_we),
+    .wd     (le_le_18_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.prio18.q),
+    .q      (reg2hw.le[18].q ),
 
     // to register interface (read)
-    .qs     (prio18_qs)
+    .qs     (le_le_18_qs)
   );
 
 
-  // R[prio19]: V(False)
-
+  // F[le_19]: 19:19
   prim_subreg #(
-    .DW      (3),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
-    .RESVAL  (3'h0)
-  ) u_prio19 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_le_19 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (prio19_we),
-    .wd     (prio19_wd),
+    .we     (le_le_19_we),
+    .wd     (le_le_19_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.prio19.q),
+    .q      (reg2hw.le[19].q ),
 
     // to register interface (read)
-    .qs     (prio19_qs)
+    .qs     (le_le_19_qs)
   );
 
 
-  // R[prio20]: V(False)
-
+  // F[le_20]: 20:20
   prim_subreg #(
-    .DW      (3),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
-    .RESVAL  (3'h0)
-  ) u_prio20 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_le_20 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (prio20_we),
-    .wd     (prio20_wd),
+    .we     (le_le_20_we),
+    .wd     (le_le_20_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.prio20.q),
+    .q      (reg2hw.le[20].q ),
 
     // to register interface (read)
-    .qs     (prio20_qs)
+    .qs     (le_le_20_qs)
   );
 
 
-  // R[prio21]: V(False)
-
+  // F[le_21]: 21:21
   prim_subreg #(
-    .DW      (3),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
-    .RESVAL  (3'h0)
-  ) u_prio21 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_le_21 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (prio21_we),
-    .wd     (prio21_wd),
+    .we     (le_le_21_we),
+    .wd     (le_le_21_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.prio21.q),
+    .q      (reg2hw.le[21].q ),
 
     // to register interface (read)
-    .qs     (prio21_qs)
+    .qs     (le_le_21_qs)
   );
 
 
-  // R[prio22]: V(False)
-
+  // F[le_22]: 22:22
   prim_subreg #(
-    .DW      (3),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
-    .RESVAL  (3'h0)
-  ) u_prio22 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_le_22 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (prio22_we),
-    .wd     (prio22_wd),
+    .we     (le_le_22_we),
+    .wd     (le_le_22_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.prio22.q),
+    .q      (reg2hw.le[22].q ),
 
     // to register interface (read)
-    .qs     (prio22_qs)
+    .qs     (le_le_22_qs)
   );
 
 
-  // R[prio23]: V(False)
-
+  // F[le_23]: 23:23
   prim_subreg #(
-    .DW      (3),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
-    .RESVAL  (3'h0)
-  ) u_prio23 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_le_23 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (prio23_we),
-    .wd     (prio23_wd),
+    .we     (le_le_23_we),
+    .wd     (le_le_23_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.prio23.q),
+    .q      (reg2hw.le[23].q ),
 
     // to register interface (read)
-    .qs     (prio23_qs)
+    .qs     (le_le_23_qs)
   );
 
 
-  // R[prio24]: V(False)
-
+  // F[le_24]: 24:24
   prim_subreg #(
-    .DW      (3),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
-    .RESVAL  (3'h0)
-  ) u_prio24 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_le_24 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (prio24_we),
-    .wd     (prio24_wd),
+    .we     (le_le_24_we),
+    .wd     (le_le_24_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.prio24.q),
+    .q      (reg2hw.le[24].q ),
 
     // to register interface (read)
-    .qs     (prio24_qs)
+    .qs     (le_le_24_qs)
   );
 
 
-  // R[prio25]: V(False)
-
+  // F[le_25]: 25:25
   prim_subreg #(
-    .DW      (3),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
-    .RESVAL  (3'h0)
-  ) u_prio25 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_le_25 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (prio25_we),
-    .wd     (prio25_wd),
+    .we     (le_le_25_we),
+    .wd     (le_le_25_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.prio25.q),
+    .q      (reg2hw.le[25].q ),
 
     // to register interface (read)
-    .qs     (prio25_qs)
+    .qs     (le_le_25_qs)
   );
 
 
-  // R[prio26]: V(False)
-
+  // F[le_26]: 26:26
   prim_subreg #(
-    .DW      (3),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
-    .RESVAL  (3'h0)
-  ) u_prio26 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_le_26 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (prio26_we),
-    .wd     (prio26_wd),
+    .we     (le_le_26_we),
+    .wd     (le_le_26_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.prio26.q),
+    .q      (reg2hw.le[26].q ),
 
     // to register interface (read)
-    .qs     (prio26_qs)
+    .qs     (le_le_26_qs)
   );
 
 
-  // R[prio27]: V(False)
-
+  // F[le_27]: 27:27
   prim_subreg #(
-    .DW      (3),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
-    .RESVAL  (3'h0)
-  ) u_prio27 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_le_27 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (prio27_we),
-    .wd     (prio27_wd),
+    .we     (le_le_27_we),
+    .wd     (le_le_27_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.prio27.q),
+    .q      (reg2hw.le[27].q ),
 
     // to register interface (read)
-    .qs     (prio27_qs)
+    .qs     (le_le_27_qs)
   );
 
 
-  // R[prio28]: V(False)
-
+  // F[le_28]: 28:28
   prim_subreg #(
-    .DW      (3),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
-    .RESVAL  (3'h0)
-  ) u_prio28 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_le_28 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (prio28_we),
-    .wd     (prio28_wd),
+    .we     (le_le_28_we),
+    .wd     (le_le_28_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.prio28.q),
+    .q      (reg2hw.le[28].q ),
 
     // to register interface (read)
-    .qs     (prio28_qs)
+    .qs     (le_le_28_qs)
   );
 
 
-  // R[prio29]: V(False)
-
+  // F[le_29]: 29:29
   prim_subreg #(
-    .DW      (3),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
-    .RESVAL  (3'h0)
-  ) u_prio29 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_le_29 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (prio29_we),
-    .wd     (prio29_wd),
+    .we     (le_le_29_we),
+    .wd     (le_le_29_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.prio29.q),
+    .q      (reg2hw.le[29].q ),
 
     // to register interface (read)
-    .qs     (prio29_qs)
+    .qs     (le_le_29_qs)
   );
 
 
-  // R[prio30]: V(False)
-
+  // F[le_30]: 30:30
   prim_subreg #(
-    .DW      (3),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
-    .RESVAL  (3'h0)
-  ) u_prio30 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_le_30 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (prio30_we),
-    .wd     (prio30_wd),
+    .we     (le_le_30_we),
+    .wd     (le_le_30_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.prio30.q),
+    .q      (reg2hw.le[30].q ),
 
     // to register interface (read)
-    .qs     (prio30_qs)
+    .qs     (le_le_30_qs)
   );
 
 
-  // R[prio31]: V(False)
-
+  // F[le_31]: 31:31
   prim_subreg #(
-    .DW      (3),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
-    .RESVAL  (3'h0)
-  ) u_prio31 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .DW      (1),
+    .SWACCESS("RW"),
+    .RESVAL  (1'h0)
+  ) u_le_le_31 (
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (prio31_we),
-    .wd     (prio31_wd),
+    .we     (le_le_31_we),
+    .wd     (le_le_31_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.prio31.q),
+    .q      (reg2hw.le[31].q ),
 
     // to register interface (read)
-    .qs     (prio31_qs)
+    .qs     (le_le_31_qs)
   );
 
 
 
+
   // Subregister 0 of Multireg ie0
   // R[ie0]: V(False)
 
   // F[e_0]: 0:0
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_ie0_e_0 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (ie0_we),
+    .we     (ie0_e_0_we),
     .wd     (ie0_e_0_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.ie0[0].q),
+    .q      (reg2hw.ie0[0].q ),
 
     // to register interface (read)
     .qs     (ie0_e_0_qs)
@@ -2952,23 +2941,23 @@ module rv_plic_reg_top (
   // F[e_1]: 1:1
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_ie0_e_1 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (ie0_we),
+    .we     (ie0_e_1_we),
     .wd     (ie0_e_1_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.ie0[1].q),
+    .q      (reg2hw.ie0[1].q ),
 
     // to register interface (read)
     .qs     (ie0_e_1_qs)
@@ -2978,23 +2967,23 @@ module rv_plic_reg_top (
   // F[e_2]: 2:2
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_ie0_e_2 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (ie0_we),
+    .we     (ie0_e_2_we),
     .wd     (ie0_e_2_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.ie0[2].q),
+    .q      (reg2hw.ie0[2].q ),
 
     // to register interface (read)
     .qs     (ie0_e_2_qs)
@@ -3004,23 +2993,23 @@ module rv_plic_reg_top (
   // F[e_3]: 3:3
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_ie0_e_3 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (ie0_we),
+    .we     (ie0_e_3_we),
     .wd     (ie0_e_3_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.ie0[3].q),
+    .q      (reg2hw.ie0[3].q ),
 
     // to register interface (read)
     .qs     (ie0_e_3_qs)
@@ -3030,23 +3019,23 @@ module rv_plic_reg_top (
   // F[e_4]: 4:4
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_ie0_e_4 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (ie0_we),
+    .we     (ie0_e_4_we),
     .wd     (ie0_e_4_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.ie0[4].q),
+    .q      (reg2hw.ie0[4].q ),
 
     // to register interface (read)
     .qs     (ie0_e_4_qs)
@@ -3056,23 +3045,23 @@ module rv_plic_reg_top (
   // F[e_5]: 5:5
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_ie0_e_5 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (ie0_we),
+    .we     (ie0_e_5_we),
     .wd     (ie0_e_5_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.ie0[5].q),
+    .q      (reg2hw.ie0[5].q ),
 
     // to register interface (read)
     .qs     (ie0_e_5_qs)
@@ -3082,23 +3071,23 @@ module rv_plic_reg_top (
   // F[e_6]: 6:6
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_ie0_e_6 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (ie0_we),
+    .we     (ie0_e_6_we),
     .wd     (ie0_e_6_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.ie0[6].q),
+    .q      (reg2hw.ie0[6].q ),
 
     // to register interface (read)
     .qs     (ie0_e_6_qs)
@@ -3108,23 +3097,23 @@ module rv_plic_reg_top (
   // F[e_7]: 7:7
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_ie0_e_7 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (ie0_we),
+    .we     (ie0_e_7_we),
     .wd     (ie0_e_7_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.ie0[7].q),
+    .q      (reg2hw.ie0[7].q ),
 
     // to register interface (read)
     .qs     (ie0_e_7_qs)
@@ -3134,23 +3123,23 @@ module rv_plic_reg_top (
   // F[e_8]: 8:8
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_ie0_e_8 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (ie0_we),
+    .we     (ie0_e_8_we),
     .wd     (ie0_e_8_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.ie0[8].q),
+    .q      (reg2hw.ie0[8].q ),
 
     // to register interface (read)
     .qs     (ie0_e_8_qs)
@@ -3160,23 +3149,23 @@ module rv_plic_reg_top (
   // F[e_9]: 9:9
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_ie0_e_9 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (ie0_we),
+    .we     (ie0_e_9_we),
     .wd     (ie0_e_9_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.ie0[9].q),
+    .q      (reg2hw.ie0[9].q ),
 
     // to register interface (read)
     .qs     (ie0_e_9_qs)
@@ -3186,23 +3175,23 @@ module rv_plic_reg_top (
   // F[e_10]: 10:10
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_ie0_e_10 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (ie0_we),
+    .we     (ie0_e_10_we),
     .wd     (ie0_e_10_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.ie0[10].q),
+    .q      (reg2hw.ie0[10].q ),
 
     // to register interface (read)
     .qs     (ie0_e_10_qs)
@@ -3212,23 +3201,23 @@ module rv_plic_reg_top (
   // F[e_11]: 11:11
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_ie0_e_11 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (ie0_we),
+    .we     (ie0_e_11_we),
     .wd     (ie0_e_11_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.ie0[11].q),
+    .q      (reg2hw.ie0[11].q ),
 
     // to register interface (read)
     .qs     (ie0_e_11_qs)
@@ -3238,23 +3227,23 @@ module rv_plic_reg_top (
   // F[e_12]: 12:12
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_ie0_e_12 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (ie0_we),
+    .we     (ie0_e_12_we),
     .wd     (ie0_e_12_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.ie0[12].q),
+    .q      (reg2hw.ie0[12].q ),
 
     // to register interface (read)
     .qs     (ie0_e_12_qs)
@@ -3264,23 +3253,23 @@ module rv_plic_reg_top (
   // F[e_13]: 13:13
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_ie0_e_13 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (ie0_we),
+    .we     (ie0_e_13_we),
     .wd     (ie0_e_13_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.ie0[13].q),
+    .q      (reg2hw.ie0[13].q ),
 
     // to register interface (read)
     .qs     (ie0_e_13_qs)
@@ -3290,23 +3279,23 @@ module rv_plic_reg_top (
   // F[e_14]: 14:14
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_ie0_e_14 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (ie0_we),
+    .we     (ie0_e_14_we),
     .wd     (ie0_e_14_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.ie0[14].q),
+    .q      (reg2hw.ie0[14].q ),
 
     // to register interface (read)
     .qs     (ie0_e_14_qs)
@@ -3316,23 +3305,23 @@ module rv_plic_reg_top (
   // F[e_15]: 15:15
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_ie0_e_15 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (ie0_we),
+    .we     (ie0_e_15_we),
     .wd     (ie0_e_15_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.ie0[15].q),
+    .q      (reg2hw.ie0[15].q ),
 
     // to register interface (read)
     .qs     (ie0_e_15_qs)
@@ -3342,23 +3331,23 @@ module rv_plic_reg_top (
   // F[e_16]: 16:16
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_ie0_e_16 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (ie0_we),
+    .we     (ie0_e_16_we),
     .wd     (ie0_e_16_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.ie0[16].q),
+    .q      (reg2hw.ie0[16].q ),
 
     // to register interface (read)
     .qs     (ie0_e_16_qs)
@@ -3368,23 +3357,23 @@ module rv_plic_reg_top (
   // F[e_17]: 17:17
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_ie0_e_17 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (ie0_we),
+    .we     (ie0_e_17_we),
     .wd     (ie0_e_17_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.ie0[17].q),
+    .q      (reg2hw.ie0[17].q ),
 
     // to register interface (read)
     .qs     (ie0_e_17_qs)
@@ -3394,23 +3383,23 @@ module rv_plic_reg_top (
   // F[e_18]: 18:18
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_ie0_e_18 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (ie0_we),
+    .we     (ie0_e_18_we),
     .wd     (ie0_e_18_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.ie0[18].q),
+    .q      (reg2hw.ie0[18].q ),
 
     // to register interface (read)
     .qs     (ie0_e_18_qs)
@@ -3420,23 +3409,23 @@ module rv_plic_reg_top (
   // F[e_19]: 19:19
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_ie0_e_19 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (ie0_we),
+    .we     (ie0_e_19_we),
     .wd     (ie0_e_19_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.ie0[19].q),
+    .q      (reg2hw.ie0[19].q ),
 
     // to register interface (read)
     .qs     (ie0_e_19_qs)
@@ -3446,23 +3435,23 @@ module rv_plic_reg_top (
   // F[e_20]: 20:20
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_ie0_e_20 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (ie0_we),
+    .we     (ie0_e_20_we),
     .wd     (ie0_e_20_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.ie0[20].q),
+    .q      (reg2hw.ie0[20].q ),
 
     // to register interface (read)
     .qs     (ie0_e_20_qs)
@@ -3472,23 +3461,23 @@ module rv_plic_reg_top (
   // F[e_21]: 21:21
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_ie0_e_21 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (ie0_we),
+    .we     (ie0_e_21_we),
     .wd     (ie0_e_21_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.ie0[21].q),
+    .q      (reg2hw.ie0[21].q ),
 
     // to register interface (read)
     .qs     (ie0_e_21_qs)
@@ -3498,23 +3487,23 @@ module rv_plic_reg_top (
   // F[e_22]: 22:22
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_ie0_e_22 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (ie0_we),
+    .we     (ie0_e_22_we),
     .wd     (ie0_e_22_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.ie0[22].q),
+    .q      (reg2hw.ie0[22].q ),
 
     // to register interface (read)
     .qs     (ie0_e_22_qs)
@@ -3524,23 +3513,23 @@ module rv_plic_reg_top (
   // F[e_23]: 23:23
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_ie0_e_23 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (ie0_we),
+    .we     (ie0_e_23_we),
     .wd     (ie0_e_23_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.ie0[23].q),
+    .q      (reg2hw.ie0[23].q ),
 
     // to register interface (read)
     .qs     (ie0_e_23_qs)
@@ -3550,23 +3539,23 @@ module rv_plic_reg_top (
   // F[e_24]: 24:24
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_ie0_e_24 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (ie0_we),
+    .we     (ie0_e_24_we),
     .wd     (ie0_e_24_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.ie0[24].q),
+    .q      (reg2hw.ie0[24].q ),
 
     // to register interface (read)
     .qs     (ie0_e_24_qs)
@@ -3576,23 +3565,23 @@ module rv_plic_reg_top (
   // F[e_25]: 25:25
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_ie0_e_25 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (ie0_we),
+    .we     (ie0_e_25_we),
     .wd     (ie0_e_25_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.ie0[25].q),
+    .q      (reg2hw.ie0[25].q ),
 
     // to register interface (read)
     .qs     (ie0_e_25_qs)
@@ -3602,23 +3591,23 @@ module rv_plic_reg_top (
   // F[e_26]: 26:26
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_ie0_e_26 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (ie0_we),
+    .we     (ie0_e_26_we),
     .wd     (ie0_e_26_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.ie0[26].q),
+    .q      (reg2hw.ie0[26].q ),
 
     // to register interface (read)
     .qs     (ie0_e_26_qs)
@@ -3628,23 +3617,23 @@ module rv_plic_reg_top (
   // F[e_27]: 27:27
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_ie0_e_27 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (ie0_we),
+    .we     (ie0_e_27_we),
     .wd     (ie0_e_27_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.ie0[27].q),
+    .q      (reg2hw.ie0[27].q ),
 
     // to register interface (read)
     .qs     (ie0_e_27_qs)
@@ -3654,23 +3643,23 @@ module rv_plic_reg_top (
   // F[e_28]: 28:28
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_ie0_e_28 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (ie0_we),
+    .we     (ie0_e_28_we),
     .wd     (ie0_e_28_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.ie0[28].q),
+    .q      (reg2hw.ie0[28].q ),
 
     // to register interface (read)
     .qs     (ie0_e_28_qs)
@@ -3680,23 +3669,23 @@ module rv_plic_reg_top (
   // F[e_29]: 29:29
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_ie0_e_29 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (ie0_we),
+    .we     (ie0_e_29_we),
     .wd     (ie0_e_29_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.ie0[29].q),
+    .q      (reg2hw.ie0[29].q ),
 
     // to register interface (read)
     .qs     (ie0_e_29_qs)
@@ -3706,23 +3695,23 @@ module rv_plic_reg_top (
   // F[e_30]: 30:30
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_ie0_e_30 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (ie0_we),
+    .we     (ie0_e_30_we),
     .wd     (ie0_e_30_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.ie0[30].q),
+    .q      (reg2hw.ie0[30].q ),
 
     // to register interface (read)
     .qs     (ie0_e_30_qs)
@@ -3732,23 +3721,23 @@ module rv_plic_reg_top (
   // F[e_31]: 31:31
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_ie0_e_31 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
-    .we     (ie0_we),
+    .we     (ie0_e_31_we),
     .wd     (ie0_e_31_wd),
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.ie0[31].q),
+    .q      (reg2hw.ie0[31].q ),
 
     // to register interface (read)
     .qs     (ie0_e_31_qs)
@@ -3760,11 +3749,11 @@ module rv_plic_reg_top (
 
   prim_subreg #(
     .DW      (3),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (3'h0)
   ) u_threshold0 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
     .we     (threshold0_we),
@@ -3772,11 +3761,11 @@ module rv_plic_reg_top (
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.threshold0.q),
+    .q      (reg2hw.threshold0.q ),
 
     // to register interface (read)
     .qs     (threshold0_qs)
@@ -3794,7 +3783,7 @@ module rv_plic_reg_top (
     .d      (hw2reg.cc0.d),
     .qre    (reg2hw.cc0.re),
     .qe     (reg2hw.cc0.qe),
-    .q      (reg2hw.cc0.q),
+    .q      (reg2hw.cc0.q ),
     .qs     (cc0_qs)
   );
 
@@ -3803,11 +3792,11 @@ module rv_plic_reg_top (
 
   prim_subreg #(
     .DW      (1),
-    .SwAccess(prim_subreg_pkg::SwAccessRW),
+    .SWACCESS("RW"),
     .RESVAL  (1'h0)
   ) u_msip0 (
-    .clk_i   (clk_i),
-    .rst_ni  (rst_ni),
+    .clk_i   (clk_i    ),
+    .rst_ni  (rst_ni  ),
 
     // from register interface
     .we     (msip0_we),
@@ -3815,11 +3804,11 @@ module rv_plic_reg_top (
 
     // from internal hardware
     .de     (1'b0),
-    .d      ('0),
+    .d      ('0  ),
 
     // to internal hardware
     .qe     (),
-    .q      (reg2hw.msip0.q),
+    .q      (reg2hw.msip0.q ),
 
     // to register interface (read)
     .qs     (msip0_qs)
@@ -3837,7 +3826,7 @@ module rv_plic_reg_top (
     .d      ('0),
     .qre    (),
     .qe     (reg2hw.alert_test.qe),
-    .q      (reg2hw.alert_test.q),
+    .q      (reg2hw.alert_test.q ),
     .qs     ()
   );
 
@@ -3847,40 +3836,40 @@ module rv_plic_reg_top (
   logic [38:0] addr_hit;
   always_comb begin
     addr_hit = '0;
-    addr_hit[ 0] = (reg_addr == RV_PLIC_IP_OFFSET);
-    addr_hit[ 1] = (reg_addr == RV_PLIC_LE_OFFSET);
-    addr_hit[ 2] = (reg_addr == RV_PLIC_PRIO0_OFFSET);
-    addr_hit[ 3] = (reg_addr == RV_PLIC_PRIO1_OFFSET);
-    addr_hit[ 4] = (reg_addr == RV_PLIC_PRIO2_OFFSET);
-    addr_hit[ 5] = (reg_addr == RV_PLIC_PRIO3_OFFSET);
-    addr_hit[ 6] = (reg_addr == RV_PLIC_PRIO4_OFFSET);
-    addr_hit[ 7] = (reg_addr == RV_PLIC_PRIO5_OFFSET);
-    addr_hit[ 8] = (reg_addr == RV_PLIC_PRIO6_OFFSET);
-    addr_hit[ 9] = (reg_addr == RV_PLIC_PRIO7_OFFSET);
-    addr_hit[10] = (reg_addr == RV_PLIC_PRIO8_OFFSET);
-    addr_hit[11] = (reg_addr == RV_PLIC_PRIO9_OFFSET);
-    addr_hit[12] = (reg_addr == RV_PLIC_PRIO10_OFFSET);
-    addr_hit[13] = (reg_addr == RV_PLIC_PRIO11_OFFSET);
-    addr_hit[14] = (reg_addr == RV_PLIC_PRIO12_OFFSET);
-    addr_hit[15] = (reg_addr == RV_PLIC_PRIO13_OFFSET);
-    addr_hit[16] = (reg_addr == RV_PLIC_PRIO14_OFFSET);
-    addr_hit[17] = (reg_addr == RV_PLIC_PRIO15_OFFSET);
-    addr_hit[18] = (reg_addr == RV_PLIC_PRIO16_OFFSET);
-    addr_hit[19] = (reg_addr == RV_PLIC_PRIO17_OFFSET);
-    addr_hit[20] = (reg_addr == RV_PLIC_PRIO18_OFFSET);
-    addr_hit[21] = (reg_addr == RV_PLIC_PRIO19_OFFSET);
-    addr_hit[22] = (reg_addr == RV_PLIC_PRIO20_OFFSET);
-    addr_hit[23] = (reg_addr == RV_PLIC_PRIO21_OFFSET);
-    addr_hit[24] = (reg_addr == RV_PLIC_PRIO22_OFFSET);
-    addr_hit[25] = (reg_addr == RV_PLIC_PRIO23_OFFSET);
-    addr_hit[26] = (reg_addr == RV_PLIC_PRIO24_OFFSET);
-    addr_hit[27] = (reg_addr == RV_PLIC_PRIO25_OFFSET);
-    addr_hit[28] = (reg_addr == RV_PLIC_PRIO26_OFFSET);
-    addr_hit[29] = (reg_addr == RV_PLIC_PRIO27_OFFSET);
-    addr_hit[30] = (reg_addr == RV_PLIC_PRIO28_OFFSET);
-    addr_hit[31] = (reg_addr == RV_PLIC_PRIO29_OFFSET);
-    addr_hit[32] = (reg_addr == RV_PLIC_PRIO30_OFFSET);
-    addr_hit[33] = (reg_addr == RV_PLIC_PRIO31_OFFSET);
+    addr_hit[ 0] = (reg_addr == RV_PLIC_PRIO0_OFFSET);
+    addr_hit[ 1] = (reg_addr == RV_PLIC_PRIO1_OFFSET);
+    addr_hit[ 2] = (reg_addr == RV_PLIC_PRIO2_OFFSET);
+    addr_hit[ 3] = (reg_addr == RV_PLIC_PRIO3_OFFSET);
+    addr_hit[ 4] = (reg_addr == RV_PLIC_PRIO4_OFFSET);
+    addr_hit[ 5] = (reg_addr == RV_PLIC_PRIO5_OFFSET);
+    addr_hit[ 6] = (reg_addr == RV_PLIC_PRIO6_OFFSET);
+    addr_hit[ 7] = (reg_addr == RV_PLIC_PRIO7_OFFSET);
+    addr_hit[ 8] = (reg_addr == RV_PLIC_PRIO8_OFFSET);
+    addr_hit[ 9] = (reg_addr == RV_PLIC_PRIO9_OFFSET);
+    addr_hit[10] = (reg_addr == RV_PLIC_PRIO10_OFFSET);
+    addr_hit[11] = (reg_addr == RV_PLIC_PRIO11_OFFSET);
+    addr_hit[12] = (reg_addr == RV_PLIC_PRIO12_OFFSET);
+    addr_hit[13] = (reg_addr == RV_PLIC_PRIO13_OFFSET);
+    addr_hit[14] = (reg_addr == RV_PLIC_PRIO14_OFFSET);
+    addr_hit[15] = (reg_addr == RV_PLIC_PRIO15_OFFSET);
+    addr_hit[16] = (reg_addr == RV_PLIC_PRIO16_OFFSET);
+    addr_hit[17] = (reg_addr == RV_PLIC_PRIO17_OFFSET);
+    addr_hit[18] = (reg_addr == RV_PLIC_PRIO18_OFFSET);
+    addr_hit[19] = (reg_addr == RV_PLIC_PRIO19_OFFSET);
+    addr_hit[20] = (reg_addr == RV_PLIC_PRIO20_OFFSET);
+    addr_hit[21] = (reg_addr == RV_PLIC_PRIO21_OFFSET);
+    addr_hit[22] = (reg_addr == RV_PLIC_PRIO22_OFFSET);
+    addr_hit[23] = (reg_addr == RV_PLIC_PRIO23_OFFSET);
+    addr_hit[24] = (reg_addr == RV_PLIC_PRIO24_OFFSET);
+    addr_hit[25] = (reg_addr == RV_PLIC_PRIO25_OFFSET);
+    addr_hit[26] = (reg_addr == RV_PLIC_PRIO26_OFFSET);
+    addr_hit[27] = (reg_addr == RV_PLIC_PRIO27_OFFSET);
+    addr_hit[28] = (reg_addr == RV_PLIC_PRIO28_OFFSET);
+    addr_hit[29] = (reg_addr == RV_PLIC_PRIO29_OFFSET);
+    addr_hit[30] = (reg_addr == RV_PLIC_PRIO30_OFFSET);
+    addr_hit[31] = (reg_addr == RV_PLIC_PRIO31_OFFSET);
+    addr_hit[32] = (reg_addr == RV_PLIC_IP_OFFSET);
+    addr_hit[33] = (reg_addr == RV_PLIC_LE_OFFSET);
     addr_hit[34] = (reg_addr == RV_PLIC_IE0_OFFSET);
     addr_hit[35] = (reg_addr == RV_PLIC_THRESHOLD0_OFFSET);
     addr_hit[36] = (reg_addr == RV_PLIC_CC0_OFFSET);
@@ -3933,244 +3922,306 @@ module rv_plic_reg_top (
                (addr_hit[37] & (|(RV_PLIC_PERMIT[37] & ~reg_be))) |
                (addr_hit[38] & (|(RV_PLIC_PERMIT[38] & ~reg_be)))));
   end
-  assign le_we = addr_hit[1] & reg_we & !reg_error;
 
-  assign le_le_0_wd = reg_wdata[0];
+  assign prio0_we = addr_hit[0] & reg_we & !reg_error;
+  assign prio0_wd = reg_wdata[2:0];
 
-  assign le_le_1_wd = reg_wdata[1];
+  assign prio1_we = addr_hit[1] & reg_we & !reg_error;
+  assign prio1_wd = reg_wdata[2:0];
 
-  assign le_le_2_wd = reg_wdata[2];
+  assign prio2_we = addr_hit[2] & reg_we & !reg_error;
+  assign prio2_wd = reg_wdata[2:0];
 
-  assign le_le_3_wd = reg_wdata[3];
+  assign prio3_we = addr_hit[3] & reg_we & !reg_error;
+  assign prio3_wd = reg_wdata[2:0];
 
-  assign le_le_4_wd = reg_wdata[4];
+  assign prio4_we = addr_hit[4] & reg_we & !reg_error;
+  assign prio4_wd = reg_wdata[2:0];
 
-  assign le_le_5_wd = reg_wdata[5];
+  assign prio5_we = addr_hit[5] & reg_we & !reg_error;
+  assign prio5_wd = reg_wdata[2:0];
 
-  assign le_le_6_wd = reg_wdata[6];
+  assign prio6_we = addr_hit[6] & reg_we & !reg_error;
+  assign prio6_wd = reg_wdata[2:0];
 
-  assign le_le_7_wd = reg_wdata[7];
+  assign prio7_we = addr_hit[7] & reg_we & !reg_error;
+  assign prio7_wd = reg_wdata[2:0];
 
-  assign le_le_8_wd = reg_wdata[8];
+  assign prio8_we = addr_hit[8] & reg_we & !reg_error;
+  assign prio8_wd = reg_wdata[2:0];
 
-  assign le_le_9_wd = reg_wdata[9];
+  assign prio9_we = addr_hit[9] & reg_we & !reg_error;
+  assign prio9_wd = reg_wdata[2:0];
 
-  assign le_le_10_wd = reg_wdata[10];
+  assign prio10_we = addr_hit[10] & reg_we & !reg_error;
+  assign prio10_wd = reg_wdata[2:0];
 
-  assign le_le_11_wd = reg_wdata[11];
+  assign prio11_we = addr_hit[11] & reg_we & !reg_error;
+  assign prio11_wd = reg_wdata[2:0];
 
-  assign le_le_12_wd = reg_wdata[12];
+  assign prio12_we = addr_hit[12] & reg_we & !reg_error;
+  assign prio12_wd = reg_wdata[2:0];
 
-  assign le_le_13_wd = reg_wdata[13];
+  assign prio13_we = addr_hit[13] & reg_we & !reg_error;
+  assign prio13_wd = reg_wdata[2:0];
 
-  assign le_le_14_wd = reg_wdata[14];
+  assign prio14_we = addr_hit[14] & reg_we & !reg_error;
+  assign prio14_wd = reg_wdata[2:0];
 
-  assign le_le_15_wd = reg_wdata[15];
+  assign prio15_we = addr_hit[15] & reg_we & !reg_error;
+  assign prio15_wd = reg_wdata[2:0];
 
-  assign le_le_16_wd = reg_wdata[16];
+  assign prio16_we = addr_hit[16] & reg_we & !reg_error;
+  assign prio16_wd = reg_wdata[2:0];
 
-  assign le_le_17_wd = reg_wdata[17];
+  assign prio17_we = addr_hit[17] & reg_we & !reg_error;
+  assign prio17_wd = reg_wdata[2:0];
 
-  assign le_le_18_wd = reg_wdata[18];
+  assign prio18_we = addr_hit[18] & reg_we & !reg_error;
+  assign prio18_wd = reg_wdata[2:0];
 
-  assign le_le_19_wd = reg_wdata[19];
+  assign prio19_we = addr_hit[19] & reg_we & !reg_error;
+  assign prio19_wd = reg_wdata[2:0];
 
-  assign le_le_20_wd = reg_wdata[20];
+  assign prio20_we = addr_hit[20] & reg_we & !reg_error;
+  assign prio20_wd = reg_wdata[2:0];
 
-  assign le_le_21_wd = reg_wdata[21];
+  assign prio21_we = addr_hit[21] & reg_we & !reg_error;
+  assign prio21_wd = reg_wdata[2:0];
 
-  assign le_le_22_wd = reg_wdata[22];
+  assign prio22_we = addr_hit[22] & reg_we & !reg_error;
+  assign prio22_wd = reg_wdata[2:0];
 
-  assign le_le_23_wd = reg_wdata[23];
+  assign prio23_we = addr_hit[23] & reg_we & !reg_error;
+  assign prio23_wd = reg_wdata[2:0];
 
-  assign le_le_24_wd = reg_wdata[24];
+  assign prio24_we = addr_hit[24] & reg_we & !reg_error;
+  assign prio24_wd = reg_wdata[2:0];
 
-  assign le_le_25_wd = reg_wdata[25];
+  assign prio25_we = addr_hit[25] & reg_we & !reg_error;
+  assign prio25_wd = reg_wdata[2:0];
 
-  assign le_le_26_wd = reg_wdata[26];
+  assign prio26_we = addr_hit[26] & reg_we & !reg_error;
+  assign prio26_wd = reg_wdata[2:0];
 
-  assign le_le_27_wd = reg_wdata[27];
+  assign prio27_we = addr_hit[27] & reg_we & !reg_error;
+  assign prio27_wd = reg_wdata[2:0];
 
-  assign le_le_28_wd = reg_wdata[28];
+  assign prio28_we = addr_hit[28] & reg_we & !reg_error;
+  assign prio28_wd = reg_wdata[2:0];
 
-  assign le_le_29_wd = reg_wdata[29];
+  assign prio29_we = addr_hit[29] & reg_we & !reg_error;
+  assign prio29_wd = reg_wdata[2:0];
 
-  assign le_le_30_wd = reg_wdata[30];
+  assign prio30_we = addr_hit[30] & reg_we & !reg_error;
+  assign prio30_wd = reg_wdata[2:0];
 
-  assign le_le_31_wd = reg_wdata[31];
-  assign prio0_we = addr_hit[2] & reg_we & !reg_error;
+  assign prio31_we = addr_hit[31] & reg_we & !reg_error;
+  assign prio31_wd = reg_wdata[2:0];
 
-  assign prio0_wd = reg_wdata[2:0];
-  assign prio1_we = addr_hit[3] & reg_we & !reg_error;
+  assign le_le_0_we = addr_hit[33] & reg_we & !reg_error;
+  assign le_le_0_wd = reg_wdata[0];
 
-  assign prio1_wd = reg_wdata[2:0];
-  assign prio2_we = addr_hit[4] & reg_we & !reg_error;
+  assign le_le_1_we = addr_hit[33] & reg_we & !reg_error;
+  assign le_le_1_wd = reg_wdata[1];
 
-  assign prio2_wd = reg_wdata[2:0];
-  assign prio3_we = addr_hit[5] & reg_we & !reg_error;
+  assign le_le_2_we = addr_hit[33] & reg_we & !reg_error;
+  assign le_le_2_wd = reg_wdata[2];
 
-  assign prio3_wd = reg_wdata[2:0];
-  assign prio4_we = addr_hit[6] & reg_we & !reg_error;
+  assign le_le_3_we = addr_hit[33] & reg_we & !reg_error;
+  assign le_le_3_wd = reg_wdata[3];
 
-  assign prio4_wd = reg_wdata[2:0];
-  assign prio5_we = addr_hit[7] & reg_we & !reg_error;
+  assign le_le_4_we = addr_hit[33] & reg_we & !reg_error;
+  assign le_le_4_wd = reg_wdata[4];
 
-  assign prio5_wd = reg_wdata[2:0];
-  assign prio6_we = addr_hit[8] & reg_we & !reg_error;
+  assign le_le_5_we = addr_hit[33] & reg_we & !reg_error;
+  assign le_le_5_wd = reg_wdata[5];
 
-  assign prio6_wd = reg_wdata[2:0];
-  assign prio7_we = addr_hit[9] & reg_we & !reg_error;
+  assign le_le_6_we = addr_hit[33] & reg_we & !reg_error;
+  assign le_le_6_wd = reg_wdata[6];
 
-  assign prio7_wd = reg_wdata[2:0];
-  assign prio8_we = addr_hit[10] & reg_we & !reg_error;
+  assign le_le_7_we = addr_hit[33] & reg_we & !reg_error;
+  assign le_le_7_wd = reg_wdata[7];
 
-  assign prio8_wd = reg_wdata[2:0];
-  assign prio9_we = addr_hit[11] & reg_we & !reg_error;
+  assign le_le_8_we = addr_hit[33] & reg_we & !reg_error;
+  assign le_le_8_wd = reg_wdata[8];
 
-  assign prio9_wd = reg_wdata[2:0];
-  assign prio10_we = addr_hit[12] & reg_we & !reg_error;
+  assign le_le_9_we = addr_hit[33] & reg_we & !reg_error;
+  assign le_le_9_wd = reg_wdata[9];
 
-  assign prio10_wd = reg_wdata[2:0];
-  assign prio11_we = addr_hit[13] & reg_we & !reg_error;
+  assign le_le_10_we = addr_hit[33] & reg_we & !reg_error;
+  assign le_le_10_wd = reg_wdata[10];
 
-  assign prio11_wd = reg_wdata[2:0];
-  assign prio12_we = addr_hit[14] & reg_we & !reg_error;
+  assign le_le_11_we = addr_hit[33] & reg_we & !reg_error;
+  assign le_le_11_wd = reg_wdata[11];
 
-  assign prio12_wd = reg_wdata[2:0];
-  assign prio13_we = addr_hit[15] & reg_we & !reg_error;
+  assign le_le_12_we = addr_hit[33] & reg_we & !reg_error;
+  assign le_le_12_wd = reg_wdata[12];
 
-  assign prio13_wd = reg_wdata[2:0];
-  assign prio14_we = addr_hit[16] & reg_we & !reg_error;
+  assign le_le_13_we = addr_hit[33] & reg_we & !reg_error;
+  assign le_le_13_wd = reg_wdata[13];
 
-  assign prio14_wd = reg_wdata[2:0];
-  assign prio15_we = addr_hit[17] & reg_we & !reg_error;
+  assign le_le_14_we = addr_hit[33] & reg_we & !reg_error;
+  assign le_le_14_wd = reg_wdata[14];
 
-  assign prio15_wd = reg_wdata[2:0];
-  assign prio16_we = addr_hit[18] & reg_we & !reg_error;
+  assign le_le_15_we = addr_hit[33] & reg_we & !reg_error;
+  assign le_le_15_wd = reg_wdata[15];
 
-  assign prio16_wd = reg_wdata[2:0];
-  assign prio17_we = addr_hit[19] & reg_we & !reg_error;
+  assign le_le_16_we = addr_hit[33] & reg_we & !reg_error;
+  assign le_le_16_wd = reg_wdata[16];
 
-  assign prio17_wd = reg_wdata[2:0];
-  assign prio18_we = addr_hit[20] & reg_we & !reg_error;
+  assign le_le_17_we = addr_hit[33] & reg_we & !reg_error;
+  assign le_le_17_wd = reg_wdata[17];
 
-  assign prio18_wd = reg_wdata[2:0];
-  assign prio19_we = addr_hit[21] & reg_we & !reg_error;
+  assign le_le_18_we = addr_hit[33] & reg_we & !reg_error;
+  assign le_le_18_wd = reg_wdata[18];
 
-  assign prio19_wd = reg_wdata[2:0];
-  assign prio20_we = addr_hit[22] & reg_we & !reg_error;
+  assign le_le_19_we = addr_hit[33] & reg_we & !reg_error;
+  assign le_le_19_wd = reg_wdata[19];
 
-  assign prio20_wd = reg_wdata[2:0];
-  assign prio21_we = addr_hit[23] & reg_we & !reg_error;
+  assign le_le_20_we = addr_hit[33] & reg_we & !reg_error;
+  assign le_le_20_wd = reg_wdata[20];
 
-  assign prio21_wd = reg_wdata[2:0];
-  assign prio22_we = addr_hit[24] & reg_we & !reg_error;
+  assign le_le_21_we = addr_hit[33] & reg_we & !reg_error;
+  assign le_le_21_wd = reg_wdata[21];
 
-  assign prio22_wd = reg_wdata[2:0];
-  assign prio23_we = addr_hit[25] & reg_we & !reg_error;
+  assign le_le_22_we = addr_hit[33] & reg_we & !reg_error;
+  assign le_le_22_wd = reg_wdata[22];
 
-  assign prio23_wd = reg_wdata[2:0];
-  assign prio24_we = addr_hit[26] & reg_we & !reg_error;
+  assign le_le_23_we = addr_hit[33] & reg_we & !reg_error;
+  assign le_le_23_wd = reg_wdata[23];
 
-  assign prio24_wd = reg_wdata[2:0];
-  assign prio25_we = addr_hit[27] & reg_we & !reg_error;
+  assign le_le_24_we = addr_hit[33] & reg_we & !reg_error;
+  assign le_le_24_wd = reg_wdata[24];
 
-  assign prio25_wd = reg_wdata[2:0];
-  assign prio26_we = addr_hit[28] & reg_we & !reg_error;
+  assign le_le_25_we = addr_hit[33] & reg_we & !reg_error;
+  assign le_le_25_wd = reg_wdata[25];
 
-  assign prio26_wd = reg_wdata[2:0];
-  assign prio27_we = addr_hit[29] & reg_we & !reg_error;
+  assign le_le_26_we = addr_hit[33] & reg_we & !reg_error;
+  assign le_le_26_wd = reg_wdata[26];
 
-  assign prio27_wd = reg_wdata[2:0];
-  assign prio28_we = addr_hit[30] & reg_we & !reg_error;
+  assign le_le_27_we = addr_hit[33] & reg_we & !reg_error;
+  assign le_le_27_wd = reg_wdata[27];
 
-  assign prio28_wd = reg_wdata[2:0];
-  assign prio29_we = addr_hit[31] & reg_we & !reg_error;
+  assign le_le_28_we = addr_hit[33] & reg_we & !reg_error;
+  assign le_le_28_wd = reg_wdata[28];
 
-  assign prio29_wd = reg_wdata[2:0];
-  assign prio30_we = addr_hit[32] & reg_we & !reg_error;
+  assign le_le_29_we = addr_hit[33] & reg_we & !reg_error;
+  assign le_le_29_wd = reg_wdata[29];
 
-  assign prio30_wd = reg_wdata[2:0];
-  assign prio31_we = addr_hit[33] & reg_we & !reg_error;
+  assign le_le_30_we = addr_hit[33] & reg_we & !reg_error;
+  assign le_le_30_wd = reg_wdata[30];
 
-  assign prio31_wd = reg_wdata[2:0];
-  assign ie0_we = addr_hit[34] & reg_we & !reg_error;
+  assign le_le_31_we = addr_hit[33] & reg_we & !reg_error;
+  assign le_le_31_wd = reg_wdata[31];
 
+  assign ie0_e_0_we = addr_hit[34] & reg_we & !reg_error;
   assign ie0_e_0_wd = reg_wdata[0];
 
+  assign ie0_e_1_we = addr_hit[34] & reg_we & !reg_error;
   assign ie0_e_1_wd = reg_wdata[1];
 
+  assign ie0_e_2_we = addr_hit[34] & reg_we & !reg_error;
   assign ie0_e_2_wd = reg_wdata[2];
 
+  assign ie0_e_3_we = addr_hit[34] & reg_we & !reg_error;
   assign ie0_e_3_wd = reg_wdata[3];
 
+  assign ie0_e_4_we = addr_hit[34] & reg_we & !reg_error;
   assign ie0_e_4_wd = reg_wdata[4];
 
+  assign ie0_e_5_we = addr_hit[34] & reg_we & !reg_error;
   assign ie0_e_5_wd = reg_wdata[5];
 
+  assign ie0_e_6_we = addr_hit[34] & reg_we & !reg_error;
   assign ie0_e_6_wd = reg_wdata[6];
 
+  assign ie0_e_7_we = addr_hit[34] & reg_we & !reg_error;
   assign ie0_e_7_wd = reg_wdata[7];
 
+  assign ie0_e_8_we = addr_hit[34] & reg_we & !reg_error;
   assign ie0_e_8_wd = reg_wdata[8];
 
+  assign ie0_e_9_we = addr_hit[34] & reg_we & !reg_error;
   assign ie0_e_9_wd = reg_wdata[9];
 
+  assign ie0_e_10_we = addr_hit[34] & reg_we & !reg_error;
   assign ie0_e_10_wd = reg_wdata[10];
 
+  assign ie0_e_11_we = addr_hit[34] & reg_we & !reg_error;
   assign ie0_e_11_wd = reg_wdata[11];
 
+  assign ie0_e_12_we = addr_hit[34] & reg_we & !reg_error;
   assign ie0_e_12_wd = reg_wdata[12];
 
+  assign ie0_e_13_we = addr_hit[34] & reg_we & !reg_error;
   assign ie0_e_13_wd = reg_wdata[13];
 
+  assign ie0_e_14_we = addr_hit[34] & reg_we & !reg_error;
   assign ie0_e_14_wd = reg_wdata[14];
 
+  assign ie0_e_15_we = addr_hit[34] & reg_we & !reg_error;
   assign ie0_e_15_wd = reg_wdata[15];
 
+  assign ie0_e_16_we = addr_hit[34] & reg_we & !reg_error;
   assign ie0_e_16_wd = reg_wdata[16];
 
+  assign ie0_e_17_we = addr_hit[34] & reg_we & !reg_error;
   assign ie0_e_17_wd = reg_wdata[17];
 
+  assign ie0_e_18_we = addr_hit[34] & reg_we & !reg_error;
   assign ie0_e_18_wd = reg_wdata[18];
 
+  assign ie0_e_19_we = addr_hit[34] & reg_we & !reg_error;
   assign ie0_e_19_wd = reg_wdata[19];
 
+  assign ie0_e_20_we = addr_hit[34] & reg_we & !reg_error;
   assign ie0_e_20_wd = reg_wdata[20];
 
+  assign ie0_e_21_we = addr_hit[34] & reg_we & !reg_error;
   assign ie0_e_21_wd = reg_wdata[21];
 
+  assign ie0_e_22_we = addr_hit[34] & reg_we & !reg_error;
   assign ie0_e_22_wd = reg_wdata[22];
 
+  assign ie0_e_23_we = addr_hit[34] & reg_we & !reg_error;
   assign ie0_e_23_wd = reg_wdata[23];
 
+  assign ie0_e_24_we = addr_hit[34] & reg_we & !reg_error;
   assign ie0_e_24_wd = reg_wdata[24];
 
+  assign ie0_e_25_we = addr_hit[34] & reg_we & !reg_error;
   assign ie0_e_25_wd = reg_wdata[25];
 
+  assign ie0_e_26_we = addr_hit[34] & reg_we & !reg_error;
   assign ie0_e_26_wd = reg_wdata[26];
 
+  assign ie0_e_27_we = addr_hit[34] & reg_we & !reg_error;
   assign ie0_e_27_wd = reg_wdata[27];
 
+  assign ie0_e_28_we = addr_hit[34] & reg_we & !reg_error;
   assign ie0_e_28_wd = reg_wdata[28];
 
+  assign ie0_e_29_we = addr_hit[34] & reg_we & !reg_error;
   assign ie0_e_29_wd = reg_wdata[29];
 
+  assign ie0_e_30_we = addr_hit[34] & reg_we & !reg_error;
   assign ie0_e_30_wd = reg_wdata[30];
 
+  assign ie0_e_31_we = addr_hit[34] & reg_we & !reg_error;
   assign ie0_e_31_wd = reg_wdata[31];
-  assign threshold0_we = addr_hit[35] & reg_we & !reg_error;
 
+  assign threshold0_we = addr_hit[35] & reg_we & !reg_error;
   assign threshold0_wd = reg_wdata[2:0];
-  assign cc0_re = addr_hit[36] & reg_re & !reg_error;
-  assign cc0_we = addr_hit[36] & reg_we & !reg_error;
 
+  assign cc0_we = addr_hit[36] & reg_we & !reg_error;
   assign cc0_wd = reg_wdata[4:0];
-  assign msip0_we = addr_hit[37] & reg_we & !reg_error;
+  assign cc0_re = addr_hit[36] & reg_re & !reg_error;
 
+  assign msip0_we = addr_hit[37] & reg_we & !reg_error;
   assign msip0_wd = reg_wdata[0];
-  assign alert_test_we = addr_hit[38] & reg_we & !reg_error;
 
+  assign alert_test_we = addr_hit[38] & reg_we & !reg_error;
   assign alert_test_wd = reg_wdata[0];
 
   // Read data return
@@ -4178,201 +4229,201 @@ module rv_plic_reg_top (
     reg_rdata_next = '0;
     unique case (1'b1)
       addr_hit[0]: begin
-        reg_rdata_next[0] = ip_p_0_qs;
-        reg_rdata_next[1] = ip_p_1_qs;
-        reg_rdata_next[2] = ip_p_2_qs;
-        reg_rdata_next[3] = ip_p_3_qs;
-        reg_rdata_next[4] = ip_p_4_qs;
-        reg_rdata_next[5] = ip_p_5_qs;
-        reg_rdata_next[6] = ip_p_6_qs;
-        reg_rdata_next[7] = ip_p_7_qs;
-        reg_rdata_next[8] = ip_p_8_qs;
-        reg_rdata_next[9] = ip_p_9_qs;
-        reg_rdata_next[10] = ip_p_10_qs;
-        reg_rdata_next[11] = ip_p_11_qs;
-        reg_rdata_next[12] = ip_p_12_qs;
-        reg_rdata_next[13] = ip_p_13_qs;
-        reg_rdata_next[14] = ip_p_14_qs;
-        reg_rdata_next[15] = ip_p_15_qs;
-        reg_rdata_next[16] = ip_p_16_qs;
-        reg_rdata_next[17] = ip_p_17_qs;
-        reg_rdata_next[18] = ip_p_18_qs;
-        reg_rdata_next[19] = ip_p_19_qs;
-        reg_rdata_next[20] = ip_p_20_qs;
-        reg_rdata_next[21] = ip_p_21_qs;
-        reg_rdata_next[22] = ip_p_22_qs;
-        reg_rdata_next[23] = ip_p_23_qs;
-        reg_rdata_next[24] = ip_p_24_qs;
-        reg_rdata_next[25] = ip_p_25_qs;
-        reg_rdata_next[26] = ip_p_26_qs;
-        reg_rdata_next[27] = ip_p_27_qs;
-        reg_rdata_next[28] = ip_p_28_qs;
-        reg_rdata_next[29] = ip_p_29_qs;
-        reg_rdata_next[30] = ip_p_30_qs;
-        reg_rdata_next[31] = ip_p_31_qs;
+        reg_rdata_next[2:0] = prio0_qs;
       end
 
       addr_hit[1]: begin
-        reg_rdata_next[0] = le_le_0_qs;
-        reg_rdata_next[1] = le_le_1_qs;
-        reg_rdata_next[2] = le_le_2_qs;
-        reg_rdata_next[3] = le_le_3_qs;
-        reg_rdata_next[4] = le_le_4_qs;
-        reg_rdata_next[5] = le_le_5_qs;
-        reg_rdata_next[6] = le_le_6_qs;
-        reg_rdata_next[7] = le_le_7_qs;
-        reg_rdata_next[8] = le_le_8_qs;
-        reg_rdata_next[9] = le_le_9_qs;
-        reg_rdata_next[10] = le_le_10_qs;
-        reg_rdata_next[11] = le_le_11_qs;
-        reg_rdata_next[12] = le_le_12_qs;
-        reg_rdata_next[13] = le_le_13_qs;
-        reg_rdata_next[14] = le_le_14_qs;
-        reg_rdata_next[15] = le_le_15_qs;
-        reg_rdata_next[16] = le_le_16_qs;
-        reg_rdata_next[17] = le_le_17_qs;
-        reg_rdata_next[18] = le_le_18_qs;
-        reg_rdata_next[19] = le_le_19_qs;
-        reg_rdata_next[20] = le_le_20_qs;
-        reg_rdata_next[21] = le_le_21_qs;
-        reg_rdata_next[22] = le_le_22_qs;
-        reg_rdata_next[23] = le_le_23_qs;
-        reg_rdata_next[24] = le_le_24_qs;
-        reg_rdata_next[25] = le_le_25_qs;
-        reg_rdata_next[26] = le_le_26_qs;
-        reg_rdata_next[27] = le_le_27_qs;
-        reg_rdata_next[28] = le_le_28_qs;
-        reg_rdata_next[29] = le_le_29_qs;
-        reg_rdata_next[30] = le_le_30_qs;
-        reg_rdata_next[31] = le_le_31_qs;
+        reg_rdata_next[2:0] = prio1_qs;
       end
 
       addr_hit[2]: begin
-        reg_rdata_next[2:0] = prio0_qs;
+        reg_rdata_next[2:0] = prio2_qs;
       end
 
       addr_hit[3]: begin
-        reg_rdata_next[2:0] = prio1_qs;
+        reg_rdata_next[2:0] = prio3_qs;
       end
 
       addr_hit[4]: begin
-        reg_rdata_next[2:0] = prio2_qs;
+        reg_rdata_next[2:0] = prio4_qs;
       end
 
       addr_hit[5]: begin
-        reg_rdata_next[2:0] = prio3_qs;
+        reg_rdata_next[2:0] = prio5_qs;
       end
 
       addr_hit[6]: begin
-        reg_rdata_next[2:0] = prio4_qs;
+        reg_rdata_next[2:0] = prio6_qs;
       end
 
       addr_hit[7]: begin
-        reg_rdata_next[2:0] = prio5_qs;
+        reg_rdata_next[2:0] = prio7_qs;
       end
 
       addr_hit[8]: begin
-        reg_rdata_next[2:0] = prio6_qs;
+        reg_rdata_next[2:0] = prio8_qs;
       end
 
       addr_hit[9]: begin
-        reg_rdata_next[2:0] = prio7_qs;
+        reg_rdata_next[2:0] = prio9_qs;
       end
 
       addr_hit[10]: begin
-        reg_rdata_next[2:0] = prio8_qs;
+        reg_rdata_next[2:0] = prio10_qs;
       end
 
       addr_hit[11]: begin
-        reg_rdata_next[2:0] = prio9_qs;
+        reg_rdata_next[2:0] = prio11_qs;
       end
 
       addr_hit[12]: begin
-        reg_rdata_next[2:0] = prio10_qs;
+        reg_rdata_next[2:0] = prio12_qs;
       end
 
       addr_hit[13]: begin
-        reg_rdata_next[2:0] = prio11_qs;
+        reg_rdata_next[2:0] = prio13_qs;
       end
 
       addr_hit[14]: begin
-        reg_rdata_next[2:0] = prio12_qs;
+        reg_rdata_next[2:0] = prio14_qs;
       end
 
       addr_hit[15]: begin
-        reg_rdata_next[2:0] = prio13_qs;
+        reg_rdata_next[2:0] = prio15_qs;
       end
 
       addr_hit[16]: begin
-        reg_rdata_next[2:0] = prio14_qs;
+        reg_rdata_next[2:0] = prio16_qs;
       end
 
       addr_hit[17]: begin
-        reg_rdata_next[2:0] = prio15_qs;
+        reg_rdata_next[2:0] = prio17_qs;
       end
 
       addr_hit[18]: begin
-        reg_rdata_next[2:0] = prio16_qs;
+        reg_rdata_next[2:0] = prio18_qs;
       end
 
       addr_hit[19]: begin
-        reg_rdata_next[2:0] = prio17_qs;
+        reg_rdata_next[2:0] = prio19_qs;
       end
 
       addr_hit[20]: begin
-        reg_rdata_next[2:0] = prio18_qs;
+        reg_rdata_next[2:0] = prio20_qs;
       end
 
       addr_hit[21]: begin
-        reg_rdata_next[2:0] = prio19_qs;
+        reg_rdata_next[2:0] = prio21_qs;
       end
 
       addr_hit[22]: begin
-        reg_rdata_next[2:0] = prio20_qs;
+        reg_rdata_next[2:0] = prio22_qs;
       end
 
       addr_hit[23]: begin
-        reg_rdata_next[2:0] = prio21_qs;
+        reg_rdata_next[2:0] = prio23_qs;
       end
 
       addr_hit[24]: begin
-        reg_rdata_next[2:0] = prio22_qs;
+        reg_rdata_next[2:0] = prio24_qs;
       end
 
       addr_hit[25]: begin
-        reg_rdata_next[2:0] = prio23_qs;
+        reg_rdata_next[2:0] = prio25_qs;
       end
 
       addr_hit[26]: begin
-        reg_rdata_next[2:0] = prio24_qs;
+        reg_rdata_next[2:0] = prio26_qs;
       end
 
       addr_hit[27]: begin
-        reg_rdata_next[2:0] = prio25_qs;
+        reg_rdata_next[2:0] = prio27_qs;
       end
 
       addr_hit[28]: begin
-        reg_rdata_next[2:0] = prio26_qs;
+        reg_rdata_next[2:0] = prio28_qs;
       end
 
       addr_hit[29]: begin
-        reg_rdata_next[2:0] = prio27_qs;
+        reg_rdata_next[2:0] = prio29_qs;
       end
 
       addr_hit[30]: begin
-        reg_rdata_next[2:0] = prio28_qs;
+        reg_rdata_next[2:0] = prio30_qs;
       end
 
       addr_hit[31]: begin
-        reg_rdata_next[2:0] = prio29_qs;
+        reg_rdata_next[2:0] = prio31_qs;
       end
 
       addr_hit[32]: begin
-        reg_rdata_next[2:0] = prio30_qs;
+        reg_rdata_next[0] = ip_p_0_qs;
+        reg_rdata_next[1] = ip_p_1_qs;
+        reg_rdata_next[2] = ip_p_2_qs;
+        reg_rdata_next[3] = ip_p_3_qs;
+        reg_rdata_next[4] = ip_p_4_qs;
+        reg_rdata_next[5] = ip_p_5_qs;
+        reg_rdata_next[6] = ip_p_6_qs;
+        reg_rdata_next[7] = ip_p_7_qs;
+        reg_rdata_next[8] = ip_p_8_qs;
+        reg_rdata_next[9] = ip_p_9_qs;
+        reg_rdata_next[10] = ip_p_10_qs;
+        reg_rdata_next[11] = ip_p_11_qs;
+        reg_rdata_next[12] = ip_p_12_qs;
+        reg_rdata_next[13] = ip_p_13_qs;
+        reg_rdata_next[14] = ip_p_14_qs;
+        reg_rdata_next[15] = ip_p_15_qs;
+        reg_rdata_next[16] = ip_p_16_qs;
+        reg_rdata_next[17] = ip_p_17_qs;
+        reg_rdata_next[18] = ip_p_18_qs;
+        reg_rdata_next[19] = ip_p_19_qs;
+        reg_rdata_next[20] = ip_p_20_qs;
+        reg_rdata_next[21] = ip_p_21_qs;
+        reg_rdata_next[22] = ip_p_22_qs;
+        reg_rdata_next[23] = ip_p_23_qs;
+        reg_rdata_next[24] = ip_p_24_qs;
+        reg_rdata_next[25] = ip_p_25_qs;
+        reg_rdata_next[26] = ip_p_26_qs;
+        reg_rdata_next[27] = ip_p_27_qs;
+        reg_rdata_next[28] = ip_p_28_qs;
+        reg_rdata_next[29] = ip_p_29_qs;
+        reg_rdata_next[30] = ip_p_30_qs;
+        reg_rdata_next[31] = ip_p_31_qs;
       end
 
       addr_hit[33]: begin
-        reg_rdata_next[2:0] = prio31_qs;
+        reg_rdata_next[0] = le_le_0_qs;
+        reg_rdata_next[1] = le_le_1_qs;
+        reg_rdata_next[2] = le_le_2_qs;
+        reg_rdata_next[3] = le_le_3_qs;
+        reg_rdata_next[4] = le_le_4_qs;
+        reg_rdata_next[5] = le_le_5_qs;
+        reg_rdata_next[6] = le_le_6_qs;
+        reg_rdata_next[7] = le_le_7_qs;
+        reg_rdata_next[8] = le_le_8_qs;
+        reg_rdata_next[9] = le_le_9_qs;
+        reg_rdata_next[10] = le_le_10_qs;
+        reg_rdata_next[11] = le_le_11_qs;
+        reg_rdata_next[12] = le_le_12_qs;
+        reg_rdata_next[13] = le_le_13_qs;
+        reg_rdata_next[14] = le_le_14_qs;
+        reg_rdata_next[15] = le_le_15_qs;
+        reg_rdata_next[16] = le_le_16_qs;
+        reg_rdata_next[17] = le_le_17_qs;
+        reg_rdata_next[18] = le_le_18_qs;
+        reg_rdata_next[19] = le_le_19_qs;
+        reg_rdata_next[20] = le_le_20_qs;
+        reg_rdata_next[21] = le_le_21_qs;
+        reg_rdata_next[22] = le_le_22_qs;
+        reg_rdata_next[23] = le_le_23_qs;
+        reg_rdata_next[24] = le_le_24_qs;
+        reg_rdata_next[25] = le_le_25_qs;
+        reg_rdata_next[26] = le_le_26_qs;
+        reg_rdata_next[27] = le_le_27_qs;
+        reg_rdata_next[28] = le_le_28_qs;
+        reg_rdata_next[29] = le_le_29_qs;
+        reg_rdata_next[30] = le_le_30_qs;
+        reg_rdata_next[31] = le_le_31_qs;
       end
 
       addr_hit[34]: begin
@@ -4432,17 +4483,6 @@ module rv_plic_reg_top (
     endcase
   end
 
-  // register busy
-  always_comb begin
-    reg_busy = '0;
-    unique case (1'b1)
-      default: begin
-        reg_busy  = '0;
-      end
-    endcase
-  end
-
-
   // Unused signal tieoff
 
   // wdata / byte enable are not always fully used
@@ -4453,15 +4493,6 @@ module rv_plic_reg_top (
   assign unused_be = ^reg_be;
 
   // Assertions for Register Interface
-  `ASSERT_PULSE(wePulse, reg_we, clk_i, !rst_ni)
-  `ASSERT_PULSE(rePulse, reg_re, clk_i, !rst_ni)
-
-  `ASSERT(reAfterRv, $rose(reg_re || reg_we) |=> tl_o_pre.d_valid, clk_i, !rst_ni)
-
-  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit), clk_i, !rst_ni)
-
-  // this is formulated as an assumption such that the FPV testbenches do disprove this
-  // property by mistake
-  //`ASSUME(reqParity, tl_reg_h2d.a_valid |-> tl_reg_h2d.a_user.chk_en == tlul_pkg::CheckDis)
+  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))
 
 endmodule
-- 
2.16.5

